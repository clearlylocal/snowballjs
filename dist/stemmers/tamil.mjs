// Generated by Snowball 2.2.0 - https://snowballstem.org/
// deno-lint-ignore-file
import BaseStemmer from '../core/base-stemmer.mjs'

/** @typedef {{ stemWord(word: string): string }} Stemmer */

/** @type {{ new(): Stemmer }} */
const TamilStemmer = function () {
	var base = new BaseStemmer()
	/** @const */ var a_0 = [
		['வு', -1, 3],
		['வூ', -1, 4],
		['வொ', -1, 2],
		['வோ', -1, 1],
	]

	/** @const */ var a_1 = [
		['க', -1, -1],
		['ங', -1, -1],
		['ச', -1, -1],
		['ஞ', -1, -1],
		['த', -1, -1],
		['ந', -1, -1],
		['ப', -1, -1],
		['ம', -1, -1],
		['ய', -1, -1],
		['வ', -1, -1],
	]

	/** @const */ var a_2 = [
		['ி', -1, -1],
		['ீ', -1, -1],
		['ை', -1, -1],
	]

	/** @const */ var a_3 = [
		['ா', -1, -1],
		['ி', -1, -1],
		['ீ', -1, -1],
		['ு', -1, -1],
		['ூ', -1, -1],
		['ெ', -1, -1],
		['ே', -1, -1],
		['ை', -1, -1],
	]

	/** @const */ var a_4 = [
		['', -1, 2],
		['ை', 0, 1],
		['்', 0, 1],
	]

	/** @const */ var a_5 = [
		['ந்த', -1, 1],
		['ய', -1, 1],
		['வ', -1, 1],
		['னு', -1, 8],
		['ுக்', -1, 7],
		['ுக்க்', -1, 7],
		['ட்க்', -1, 3],
		['ற்க்', -1, 4],
		['ங்', -1, 9],
		['ட்ட்', -1, 5],
		['த்த்', -1, 6],
		['ந்த்', -1, 1],
		['ந்', -1, 1],
		['ட்ப்', -1, 3],
		['ய்', -1, 2],
		['ன்ற்', -1, 4],
		['வ்', -1, 1],
	]

	/** @const */ var a_6 = [
		['க', -1, -1],
		['ச', -1, -1],
		['ட', -1, -1],
		['த', -1, -1],
		['ப', -1, -1],
		['ற', -1, -1],
	]

	/** @const */ var a_7 = [
		['க', -1, -1],
		['ச', -1, -1],
		['ட', -1, -1],
		['த', -1, -1],
		['ப', -1, -1],
		['ற', -1, -1],
	]

	/** @const */ var a_8 = [
		['ஞ', -1, -1],
		['ண', -1, -1],
		['ந', -1, -1],
		['ன', -1, -1],
		['ம', -1, -1],
		['ய', -1, -1],
		['ர', -1, -1],
		['ல', -1, -1],
		['ள', -1, -1],
		['ழ', -1, -1],
		['வ', -1, -1],
	]

	/** @const */ var a_9 = [
		['ா', -1, -1],
		['ி', -1, -1],
		['ீ', -1, -1],
		['ு', -1, -1],
		['ூ', -1, -1],
		['ெ', -1, -1],
		['ே', -1, -1],
		['ை', -1, -1],
		['்', -1, -1],
	]

	/** @const */ var a_10 = [
		['அ', -1, -1],
		['இ', -1, -1],
		['உ', -1, -1],
	]

	/** @const */ var a_11 = [
		['க', -1, -1],
		['ங', -1, -1],
		['ச', -1, -1],
		['ஞ', -1, -1],
		['த', -1, -1],
		['ந', -1, -1],
		['ப', -1, -1],
		['ம', -1, -1],
		['ய', -1, -1],
		['வ', -1, -1],
	]

	/** @const */ var a_12 = [
		['க', -1, -1],
		['ச', -1, -1],
		['ட', -1, -1],
		['த', -1, -1],
		['ப', -1, -1],
		['ற', -1, -1],
	]

	/** @const */ var a_13 = [
		['கள்', -1, 4],
		['ுங்கள்', 0, 1],
		['ட்கள்', 0, 3],
		['ற்கள்', 0, 2],
	]

	/** @const */ var a_14 = [
		['ா', -1, -1],
		['ே', -1, -1],
		['ோ', -1, -1],
	]

	/** @const */ var a_15 = [
		['பி', -1, -1],
		['வி', -1, -1],
	]

	/** @const */ var a_16 = [
		['ா', -1, -1],
		['ி', -1, -1],
		['ீ', -1, -1],
		['ு', -1, -1],
		['ூ', -1, -1],
		['ெ', -1, -1],
		['ே', -1, -1],
		['ை', -1, -1],
	]

	/** @const */ var a_17 = [
		['பட்ட', -1, 3],
		['பட்டண', -1, 3],
		['தான', -1, 3],
		['படிதான', 2, 3],
		['ென', -1, 1],
		['ாகிய', -1, 1],
		['குரிய', -1, 3],
		['ுடைய', -1, 1],
		['ல்ல', -1, 2],
		['ுள்ள', -1, 1],
		['ாகி', -1, 1],
		['படி', -1, 3],
		['ின்றி', -1, 1],
		['பற்றி', -1, 3],
		['படு', -1, 3],
		['விடு', -1, 3],
		['பட்டு', -1, 3],
		['விட்டு', -1, 3],
		['பட்டது', -1, 3],
		['ென்று', -1, 1],
		['ுடை', -1, 1],
		['ில்லை', -1, 1],
		['ுடன்', -1, 1],
		['ிடம்', -1, 1],
		['ெல்லாம்', -1, 3],
		['ெனும்', -1, 1],
	]

	/** @const */ var a_18 = [
		['ா', -1, -1],
		['ி', -1, -1],
		['ீ', -1, -1],
		['ு', -1, -1],
		['ூ', -1, -1],
		['ெ', -1, -1],
		['ே', -1, -1],
		['ை', -1, -1],
	]

	/** @const */ var a_19 = [
		['ா', -1, -1],
		['ி', -1, -1],
		['ீ', -1, -1],
		['ு', -1, -1],
		['ூ', -1, -1],
		['ெ', -1, -1],
		['ே', -1, -1],
		['ை', -1, -1],
	]

	/** @const */ var a_20 = [
		['விட', -1, 2],
		['ீ', -1, 7],
		['ொடு', -1, 2],
		['ோடு', -1, 2],
		['து', -1, 6],
		['ிருந்து', 4, 2],
		['ின்று', -1, 2],
		['ுடை', -1, 2],
		['னை', -1, 1],
		['கண்', -1, 1],
		['ின்', -1, 3],
		['முன்', -1, 1],
		['ிடம்', -1, 4],
		['ிற்', -1, 2],
		['மேற்', -1, 1],
		['ல்', -1, 5],
		['ாமல்', 15, 2],
		['ால்', 15, 2],
		['ில்', 15, 2],
		['மேல்', 15, 1],
		['ுள்', -1, 2],
		['கீழ்', -1, 1],
	]

	/** @const */ var a_21 = [
		['க', -1, -1],
		['ச', -1, -1],
		['ட', -1, -1],
		['த', -1, -1],
		['ப', -1, -1],
		['ற', -1, -1],
	]

	/** @const */ var a_22 = [
		['க', -1, -1],
		['ச', -1, -1],
		['ட', -1, -1],
		['த', -1, -1],
		['ப', -1, -1],
		['ற', -1, -1],
	]

	/** @const */ var a_23 = [
		['அ', -1, -1],
		['ஆ', -1, -1],
		['இ', -1, -1],
		['ஈ', -1, -1],
		['உ', -1, -1],
		['ஊ', -1, -1],
		['எ', -1, -1],
		['ஏ', -1, -1],
		['ஐ', -1, -1],
		['ஒ', -1, -1],
		['ஓ', -1, -1],
		['ஔ', -1, -1],
	]

	/** @const */ var a_24 = [
		['ா', -1, -1],
		['ி', -1, -1],
		['ீ', -1, -1],
		['ு', -1, -1],
		['ூ', -1, -1],
		['ெ', -1, -1],
		['ே', -1, -1],
		['ை', -1, -1],
	]

	/** @const */ var a_25 = [
		['க', -1, 1],
		['த', -1, 1],
		['ன', -1, 1],
		['ப', -1, 1],
		['ய', -1, 1],
		['ா', -1, 5],
		['கு', -1, 6],
		['படு', -1, 1],
		['து', -1, 3],
		['ிற்று', -1, 1],
		['னை', -1, 1],
		['வை', -1, 1],
		['னன்', -1, 1],
		['பன்', -1, 1],
		['வன்', -1, 2],
		['ான்', -1, 4],
		['னான்', 15, 1],
		['மின்', -1, 1],
		['னென்', -1, 1],
		['ேன்', -1, 5],
		['னம்', -1, 1],
		['பம்', -1, 1],
		['ாம்', -1, 5],
		['கும்', -1, 1],
		['டும்', -1, 5],
		['தும்', -1, 1],
		['றும்', -1, 1],
		['ெம்', -1, 5],
		['ேம்', -1, 5],
		['ோம்', -1, 5],
		['ாய்', -1, 5],
		['னர்', -1, 1],
		['பர்', -1, 1],
		['ீயர்', -1, 5],
		['வர்', -1, 1],
		['ார்', -1, 5],
		['னார்', 35, 1],
		['மார்', 35, 1],
		['கொண்டிர்', -1, 1],
		['னிர்', -1, 5],
		['ீர்', -1, 5],
		['னள்', -1, 1],
		['பள்', -1, 1],
		['வள்', -1, 1],
		['ாள்', -1, 5],
		['னாள்', 44, 1],
	]

	/** @const */ var a_26 = [
		['கிற', -1, -1],
		['கின்ற', -1, -1],
		['ாநின்ற', -1, -1],
		['கிற்', -1, -1],
		['கின்ற்', -1, -1],
		['ாநின்ற்', -1, -1],
	]

	var /** boolean */ B_found_vetrumai_urupu = false
	var /** boolean */ B_found_a_match = false

	/** @return {boolean} */
	function r_has_min_length() {
		return base.current.length > 4
	}

	/** @return {boolean} */
	function r_fix_va_start() {
		var /** number */ among_var
		base.bra = base.cursor
		among_var = base.find_among(a_0)
		if (among_var == 0) {
			return false
		}
		base.ket = base.cursor
		switch (among_var) {
			case 1:
				if (!base.slice_from('ஓ')) {
					return false
				}
				break
			case 2:
				if (!base.slice_from('ஒ')) {
					return false
				}
				break
			case 3:
				if (!base.slice_from('உ')) {
					return false
				}
				break
			case 4:
				if (!base.slice_from('ஊ')) {
					return false
				}
				break
		}
		return true
	}

	/** @return {boolean} */
	function r_fix_endings() {
		var /** number */ v_1 = base.cursor
		lab0: {
			while (true) {
				var /** number */ v_2 = base.cursor
				lab1: {
					if (!r_fix_ending()) {
						break lab1
					}
					continue
				}
				base.cursor = v_2
				break
			}
		}
		base.cursor = v_1
		return true
	}

	/** @return {boolean} */
	function r_remove_question_prefixes() {
		base.bra = base.cursor
		if (!(base.eq_s('எ'))) {
			return false
		}
		if (base.find_among(a_1) == 0) {
			return false
		}
		if (!(base.eq_s('்'))) {
			return false
		}
		base.ket = base.cursor
		if (!base.slice_del()) {
			return false
		}
		var /** number */ v_1 = base.cursor
		r_fix_va_start()
		base.cursor = v_1
		return true
	}

	/** @return {boolean} */
	function r_fix_ending() {
		var /** number */ among_var
		if (base.current.length <= 3) {
			return false
		}
		base.limit_backward = base.cursor
		base.cursor = base.limit
		lab0: {
			var /** number */ v_1 = base.limit - base.cursor
			lab1: {
				base.ket = base.cursor
				among_var = base.find_among_b(a_5)
				if (among_var == 0) {
					break lab1
				}
				base.bra = base.cursor
				switch (among_var) {
					case 1:
						if (!base.slice_del()) {
							return false
						}
						break
					case 2:
						var /** number */ v_2 = base.limit - base.cursor
						if (base.find_among_b(a_2) == 0) {
							break lab1
						}
						base.cursor = base.limit - v_2
						if (!base.slice_del()) {
							return false
						}
						break
					case 3:
						if (!base.slice_from('ள்')) {
							return false
						}
						break
					case 4:
						if (!base.slice_from('ல்')) {
							return false
						}
						break
					case 5:
						if (!base.slice_from('டு')) {
							return false
						}
						break
					case 6:
						if (!B_found_vetrumai_urupu) {
							break lab1
						}
						{
							var /** number */ v_3 = base.limit - base.cursor
							lab2: {
								if (!(base.eq_s_b('ை'))) {
									break lab2
								}
								break lab1
							}
							base.cursor = base.limit - v_3
						}
						if (!base.slice_from('ம்')) {
							return false
						}
						break
					case 7:
						if (!base.slice_from('்')) {
							return false
						}
						break
					case 8:
						{
							var /** number */ v_4 = base.limit - base.cursor
							lab3: {
								if (base.find_among_b(a_3) == 0) {
									break lab3
								}
								break lab1
							}
							base.cursor = base.limit - v_4
						}
						if (!base.slice_del()) {
							return false
						}
						break
					case 9:
						among_var = base.find_among_b(a_4)
						switch (among_var) {
							case 1:
								if (!base.slice_del()) {
									return false
								}
								break
							case 2:
								if (!base.slice_from('ம்')) {
									return false
								}
								break
						}
						break
				}
				break lab0
			}
			base.cursor = base.limit - v_1
			base.ket = base.cursor
			if (!(base.eq_s_b('்'))) {
				return false
			}
			lab4: {
				var /** number */ v_5 = base.limit - base.cursor
				lab5: {
					if (base.find_among_b(a_6) == 0) {
						break lab5
					}
					var /** number */ v_6 = base.limit - base.cursor
					lab6: {
						if (!(base.eq_s_b('்'))) {
							base.cursor = base.limit - v_6
							break lab6
						}
						if (base.find_among_b(a_7) == 0) {
							base.cursor = base.limit - v_6
							break lab6
						}
					}
					base.bra = base.cursor
					if (!base.slice_del()) {
						return false
					}
					break lab4
				}
				base.cursor = base.limit - v_5
				lab7: {
					if (base.find_among_b(a_8) == 0) {
						break lab7
					}
					base.bra = base.cursor
					if (!(base.eq_s_b('்'))) {
						break lab7
					}
					if (!base.slice_del()) {
						return false
					}
					break lab4
				}
				base.cursor = base.limit - v_5
				var /** number */ v_7 = base.limit - base.cursor
				if (base.find_among_b(a_9) == 0) {
					return false
				}
				base.cursor = base.limit - v_7
				base.bra = base.cursor
				if (!base.slice_del()) {
					return false
				}
			}
		}
		base.cursor = base.limit_backward
		return true
	}

	/** @return {boolean} */
	function r_remove_pronoun_prefixes() {
		base.bra = base.cursor
		if (base.find_among(a_10) == 0) {
			return false
		}
		if (base.find_among(a_11) == 0) {
			return false
		}
		if (!(base.eq_s('்'))) {
			return false
		}
		base.ket = base.cursor
		if (!base.slice_del()) {
			return false
		}
		var /** number */ v_1 = base.cursor
		r_fix_va_start()
		base.cursor = v_1
		return true
	}

	/** @return {boolean} */
	function r_remove_plural_suffix() {
		var /** number */ among_var
		base.limit_backward = base.cursor
		base.cursor = base.limit
		base.ket = base.cursor
		among_var = base.find_among_b(a_13)
		if (among_var == 0) {
			return false
		}
		base.bra = base.cursor
		switch (among_var) {
			case 1:
				lab0: {
					var /** number */ v_1 = base.limit - base.cursor
					lab1: {
						if (base.find_among_b(a_12) == 0) {
							break lab1
						}
						if (!base.slice_from('ுங்')) {
							return false
						}
						break lab0
					}
					base.cursor = base.limit - v_1
					if (!base.slice_from('்')) {
						return false
					}
				}
				break
			case 2:
				if (!base.slice_from('ல்')) {
					return false
				}
				break
			case 3:
				if (!base.slice_from('ள்')) {
					return false
				}
				break
			case 4:
				if (!base.slice_del()) {
					return false
				}
				break
		}
		base.cursor = base.limit_backward
		return true
	}

	/** @return {boolean} */
	function r_remove_question_suffixes() {
		if (!r_has_min_length()) {
			return false
		}
		base.limit_backward = base.cursor
		base.cursor = base.limit
		var /** number */ v_1 = base.limit - base.cursor
		lab0: {
			base.ket = base.cursor
			if (base.find_among_b(a_14) == 0) {
				break lab0
			}
			base.bra = base.cursor
			if (!base.slice_from('்')) {
				return false
			}
		}
		base.cursor = base.limit - v_1
		base.cursor = base.limit_backward
		r_fix_endings()
		return true
	}

	/** @return {boolean} */
	function r_remove_command_suffixes() {
		if (!r_has_min_length()) {
			return false
		}
		base.limit_backward = base.cursor
		base.cursor = base.limit
		base.ket = base.cursor
		if (base.find_among_b(a_15) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		base.cursor = base.limit_backward
		return true
	}

	/** @return {boolean} */
	function r_remove_um() {
		if (!r_has_min_length()) {
			return false
		}
		base.limit_backward = base.cursor
		base.cursor = base.limit
		base.ket = base.cursor
		if (!(base.eq_s_b('ும்'))) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_from('்')) {
			return false
		}
		base.cursor = base.limit_backward
		var /** number */ v_1 = base.cursor
		r_fix_ending()
		base.cursor = v_1
		return true
	}

	/** @return {boolean} */
	function r_remove_common_word_endings() {
		var /** number */ among_var
		if (!r_has_min_length()) {
			return false
		}
		base.limit_backward = base.cursor
		base.cursor = base.limit
		base.ket = base.cursor
		among_var = base.find_among_b(a_17)
		if (among_var == 0) {
			return false
		}
		base.bra = base.cursor
		switch (among_var) {
			case 1:
				if (!base.slice_from('்')) {
					return false
				}
				break
			case 2:
				{
					var /** number */ v_1 = base.limit - base.cursor
					lab0: {
						if (base.find_among_b(a_16) == 0) {
							break lab0
						}
						return false
					}
					base.cursor = base.limit - v_1
				}
				if (!base.slice_from('்')) {
					return false
				}
				break
			case 3:
				if (!base.slice_del()) {
					return false
				}
				break
		}
		base.cursor = base.limit_backward
		r_fix_endings()
		return true
	}

	/** @return {boolean} */
	function r_remove_vetrumai_urupukal() {
		var /** number */ among_var
		B_found_vetrumai_urupu = false
		if (!r_has_min_length()) {
			return false
		}
		base.limit_backward = base.cursor
		base.cursor = base.limit
		lab0: {
			var /** number */ v_1 = base.limit - base.cursor
			lab1: {
				var /** number */ v_2 = base.limit - base.cursor
				base.ket = base.cursor
				among_var = base.find_among_b(a_20)
				if (among_var == 0) {
					break lab1
				}
				base.bra = base.cursor
				switch (among_var) {
					case 1:
						if (!base.slice_del()) {
							return false
						}
						break
					case 2:
						if (!base.slice_from('்')) {
							return false
						}
						break
					case 3:
						{
							var /** number */ v_3 = base.limit - base.cursor
							lab2: {
								if (!(base.eq_s_b('ம'))) {
									break lab2
								}
								break lab1
							}
							base.cursor = base.limit - v_3
						}
						if (!base.slice_from('்')) {
							return false
						}
						break
					case 4:
						if (base.current.length < 7) {
							break lab1
						}
						if (!base.slice_from('்')) {
							return false
						}
						break
					case 5:
						{
							var /** number */ v_4 = base.limit - base.cursor
							lab3: {
								if (base.find_among_b(a_18) == 0) {
									break lab3
								}
								break lab1
							}
							base.cursor = base.limit - v_4
						}
						if (!base.slice_from('்')) {
							return false
						}
						break
					case 6:
						{
							var /** number */ v_5 = base.limit - base.cursor
							lab4: {
								if (base.find_among_b(a_19) == 0) {
									break lab4
								}
								break lab1
							}
							base.cursor = base.limit - v_5
						}
						if (!base.slice_del()) {
							return false
						}
						break
					case 7:
						if (!base.slice_from('ி')) {
							return false
						}
						break
				}
				base.cursor = base.limit - v_2
				break lab0
			}
			base.cursor = base.limit - v_1
			var /** number */ v_6 = base.limit - base.cursor
			base.ket = base.cursor
			if (!(base.eq_s_b('ை'))) {
				return false
			}
			lab5: {
				var /** number */ v_7 = base.limit - base.cursor
				lab6: {
					{
						var /** number */ v_8 = base.limit - base.cursor
						lab7: {
							if (base.find_among_b(a_21) == 0) {
								break lab7
							}
							break lab6
						}
						base.cursor = base.limit - v_8
					}
					break lab5
				}
				base.cursor = base.limit - v_7
				var /** number */ v_9 = base.limit - base.cursor
				if (base.find_among_b(a_22) == 0) {
					return false
				}
				if (!(base.eq_s_b('்'))) {
					return false
				}
				base.cursor = base.limit - v_9
			}
			base.bra = base.cursor
			if (!base.slice_from('்')) {
				return false
			}
			base.cursor = base.limit - v_6
		}
		B_found_vetrumai_urupu = true
		var /** number */ v_10 = base.limit - base.cursor
		lab8: {
			base.ket = base.cursor
			if (!(base.eq_s_b('ின்'))) {
				break lab8
			}
			base.bra = base.cursor
			if (!base.slice_from('்')) {
				return false
			}
		}
		base.cursor = base.limit - v_10
		base.cursor = base.limit_backward
		r_fix_endings()
		return true
	}

	/** @return {boolean} */
	function r_remove_tense_suffixes() {
		B_found_a_match = true
		while (true) {
			var /** number */ v_1 = base.cursor
			lab0: {
				if (!B_found_a_match) {
					break lab0
				}
				var /** number */ v_2 = base.cursor
				r_remove_tense_suffix()
				base.cursor = v_2
				continue
			}
			base.cursor = v_1
			break
		}
		return true
	}

	/** @return {boolean} */
	function r_remove_tense_suffix() {
		var /** number */ among_var
		B_found_a_match = false
		if (!r_has_min_length()) {
			return false
		}
		base.limit_backward = base.cursor
		base.cursor = base.limit
		var /** number */ v_1 = base.limit - base.cursor
		lab0: {
			var /** number */ v_2 = base.limit - base.cursor
			base.ket = base.cursor
			among_var = base.find_among_b(a_25)
			if (among_var == 0) {
				break lab0
			}
			base.bra = base.cursor
			switch (among_var) {
				case 1:
					if (!base.slice_del()) {
						return false
					}
					break
				case 2:
					{
						var /** number */ v_3 = base.limit - base.cursor
						lab1: {
							if (base.find_among_b(a_23) == 0) {
								break lab1
							}
							break lab0
						}
						base.cursor = base.limit - v_3
					}
					if (!base.slice_del()) {
						return false
					}
					break
				case 3:
					{
						var /** number */ v_4 = base.limit - base.cursor
						lab2: {
							if (base.find_among_b(a_24) == 0) {
								break lab2
							}
							break lab0
						}
						base.cursor = base.limit - v_4
					}
					if (!base.slice_del()) {
						return false
					}
					break
				case 4:
					{
						var /** number */ v_5 = base.limit - base.cursor
						lab3: {
							if (!(base.eq_s_b('ச'))) {
								break lab3
							}
							break lab0
						}
						base.cursor = base.limit - v_5
					}
					if (!base.slice_from('்')) {
						return false
					}
					break
				case 5:
					if (!base.slice_from('்')) {
						return false
					}
					break
				case 6:
					var /** number */ v_6 = base.limit - base.cursor
					if (!(base.eq_s_b('்'))) {
						break lab0
					}
					base.cursor = base.limit - v_6
					if (!base.slice_del()) {
						return false
					}
					break
			}
			B_found_a_match = true
			base.cursor = base.limit - v_2
		}
		base.cursor = base.limit - v_1
		var /** number */ v_7 = base.limit - base.cursor
		lab4: {
			base.ket = base.cursor
			if (base.find_among_b(a_26) == 0) {
				break lab4
			}
			base.bra = base.cursor
			if (!base.slice_del()) {
				return false
			}
			B_found_a_match = true
		}
		base.cursor = base.limit - v_7
		base.cursor = base.limit_backward
		r_fix_endings()
		return true
	}

	this.stem = /** @return {boolean} */ function () {
		B_found_vetrumai_urupu = false
		var /** number */ v_1 = base.cursor
		r_fix_ending()
		base.cursor = v_1
		if (!r_has_min_length()) {
			return false
		}
		var /** number */ v_2 = base.cursor
		r_remove_question_prefixes()
		base.cursor = v_2
		var /** number */ v_3 = base.cursor
		r_remove_pronoun_prefixes()
		base.cursor = v_3
		var /** number */ v_4 = base.cursor
		r_remove_question_suffixes()
		base.cursor = v_4
		var /** number */ v_5 = base.cursor
		r_remove_um()
		base.cursor = v_5
		var /** number */ v_6 = base.cursor
		r_remove_common_word_endings()
		base.cursor = v_6
		var /** number */ v_7 = base.cursor
		r_remove_vetrumai_urupukal()
		base.cursor = v_7
		var /** number */ v_8 = base.cursor
		r_remove_plural_suffix()
		base.cursor = v_8
		var /** number */ v_9 = base.cursor
		r_remove_command_suffixes()
		base.cursor = v_9
		var /** number */ v_10 = base.cursor
		r_remove_tense_suffixes()
		base.cursor = v_10
		return true
	}

	/**@return{string}*/
	this['stemWord'] = function (/**string*/ word) {
		base.setCurrent(word)
		this.stem()
		return base.getCurrent()
	}
}

export default TamilStemmer
