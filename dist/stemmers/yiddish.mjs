// Generated by Snowball 2.2.0 - https://snowballstem.org/
// deno-lint-ignore-file
import BaseStemmer from '../core/base-stemmer.mjs'

/** @typedef {{ stemWord(word: string): string }} Stemmer */

/** @type {{ new(): Stemmer }} */
const YiddishStemmer = function () {
	var base = new BaseStemmer()
	/** @const */ var a_0 = [
		['וו', -1, 1],
		['וי', -1, 2],
		['יי', -1, 3],
		['ך', -1, 4],
		['ם', -1, 5],
		['ן', -1, 6],
		['ף', -1, 7],
		['ץ', -1, 8],
	]

	/** @const */ var a_1 = [
		['אדורכ', -1, 1],
		['אהינ', -1, 1],
		['אהער', -1, 1],
		['אהײמ', -1, 1],
		['אומ', -1, 1],
		['אונטער', -1, 1],
		['איבער', -1, 1],
		['אנ', -1, 1],
		['אנט', 7, 1],
		['אנטקעגנ', 8, 1],
		['אנידער', 7, 1],
		['אפ', -1, 1],
		['אפיר', 11, 1],
		['אקעגנ', -1, 1],
		['אראפ', -1, 1],
		['ארומ', -1, 1],
		['ארונטער', -1, 1],
		['אריבער', -1, 1],
		['ארױס', -1, 1],
		['ארױפ', -1, 1],
		['ארײנ', -1, 1],
		['אװעק', -1, 1],
		['אױס', -1, 1],
		['אױפ', -1, 1],
		['אײנ', -1, 1],
		['בא', -1, 1],
		['בײ', -1, 1],
		['דורכ', -1, 1],
		['דער', -1, 1],
		['מיט', -1, 1],
		['נאכ', -1, 1],
		['פאר', -1, 1],
		['פארבײ', 31, 1],
		['פארױס', 31, 1],
		['פונאנדער', -1, 1],
		['צו', -1, 1],
		['צוזאמענ', 35, 1],
		['צונױפ', 35, 1],
		['צוריק', 35, 1],
		['צע', -1, 1],
	]

	/** @const */ var a_2 = [
		['דזש', -1, -1],
		['שטר', -1, -1],
		['שטש', -1, -1],
		['שפר', -1, -1],
	]

	/** @const */ var a_3 = [
		['קליב', -1, 9],
		['ריב', -1, 10],
		['טריב', 1, 7],
		['שריב', 1, 15],
		['הױב', -1, 23],
		['שװיג', -1, 12],
		['גאנג', -1, 1],
		['זונג', -1, 18],
		['שלונג', -1, 21],
		['צװונג', -1, 20],
		['בױג', -1, 22],
		['בונד', -1, 16],
		['װיז', -1, 6],
		['ביט', -1, 4],
		['ליט', -1, 8],
		['מיט', -1, 3],
		['שניט', -1, 14],
		['נומ', -1, 2],
		['שטאנ', -1, 25],
		['ביס', -1, 5],
		['שמיס', -1, 13],
		['ריס', -1, 11],
		['טרונק', -1, 19],
		['פארלױר', -1, 24],
		['שװױר', -1, 26],
		['װוטש', -1, 17],
	]

	/** @const */ var a_4 = [
		['ונג', -1, 1],
		['סטו', -1, 1],
		['ט', -1, 1],
		['בראכט', 2, 31],
		['סט', 2, 1],
		['יסט', 4, 33],
		['עט', 2, 1],
		['שאפט', 2, 1],
		['הײט', 2, 1],
		['קײט', 2, 1],
		['יקײט', 9, 1],
		['לעכ', -1, 1],
		['עלעכ', 11, 1],
		['יזמ', -1, 1],
		['ימ', -1, 1],
		['עמ', -1, 1],
		['ענעמ', 15, 3],
		['טענעמ', 16, 4],
		['נ', -1, 1],
		['קליבנ', 18, 14],
		['ריבנ', 18, 15],
		['טריבנ', 20, 12],
		['שריבנ', 20, 7],
		['הױבנ', 18, 27],
		['שװיגנ', 18, 17],
		['זונגנ', 18, 22],
		['שלונגנ', 18, 25],
		['צװונגנ', 18, 24],
		['בױגנ', 18, 26],
		['בונדנ', 18, 20],
		['װיזנ', 18, 11],
		['טנ', 18, 4],
		['GEביטנ', 31, 9],
		['GEליטנ', 31, 13],
		['GEמיטנ', 31, 8],
		['שניטנ', 31, 19],
		['סטנ', 31, 1],
		['יסטנ', 36, 1],
		['עטנ', 31, 1],
		['GEביסנ', 18, 10],
		['שמיסנ', 18, 18],
		['GEריסנ', 18, 16],
		['ענ', 18, 1],
		['גאנגענ', 42, 5],
		['עלענ', 42, 1],
		['נומענ', 42, 6],
		['יזמענ', 42, 1],
		['שטאנענ', 42, 29],
		['טרונקנ', 18, 23],
		['פארלױרנ', 18, 28],
		['שװױרנ', 18, 30],
		['װוטשנ', 18, 21],
		['גײנ', 18, 5],
		['ס', -1, 1],
		['טס', 53, 4],
		['עטס', 54, 1],
		['נס', 53, 1],
		['טנס', 56, 4],
		['ענס', 56, 3],
		['עס', 53, 1],
		['יעס', 59, 2],
		['עלעס', 59, 1],
		['ערס', 53, 1],
		['ענערס', 62, 1],
		['ע', -1, 1],
		['טע', 64, 4],
		['סטע', 65, 1],
		['עטע', 65, 1],
		['יע', 64, -1],
		['עלע', 64, 1],
		['ענע', 64, 3],
		['טענע', 70, 4],
		['ער', -1, 1],
		['טער', 72, 4],
		['סטער', 73, 1],
		['עטער', 73, 1],
		['ענער', 72, 3],
		['טענער', 76, 4],
		['ות', -1, 32],
	]

	/** @const */ var a_5 = [
		['ונג', -1, 1],
		['שאפט', -1, 1],
		['הײט', -1, 1],
		['קײט', -1, 1],
		['יקײט', 3, 1],
		['ל', -1, 2],
	]

	/** @const */ var a_6 = [
		['יג', -1, 1],
		['יק', -1, 1],
		['דיק', 1, 1],
		['נדיק', 2, 1],
		['ענדיק', 3, 1],
		['בליק', 1, -1],
		['גליק', 1, -1],
		['ניק', 1, 1],
		['יש', -1, 1],
	]

	/** @const */ var /** Array<int> */ g_niked = [255, 155, 6]

	/** @const */ var /** Array<int> */ g_vowel = [33, 2, 4, 0, 6]

	/** @const */ var /** Array<int> */ g_consonant = [239, 254, 253, 131]

	var /** number */ I_x = 0
	var /** number */ I_p1 = 0

	/** @return {boolean} */
	function r_prelude() {
		var /** number */ among_var
		var /** number */ v_1 = base.cursor
		lab0: {
			while (true) {
				var /** number */ v_2 = base.cursor
				lab1: {
					golab2: while (true) {
						var /** number */ v_3 = base.cursor
						lab3: {
							base.bra = base.cursor
							among_var = base.find_among(a_0)
							if (among_var == 0) {
								break lab3
							}
							base.ket = base.cursor
							switch (among_var) {
								case 1:
									{
										var /** number */ v_4 = base.cursor
										lab4: {
											if (!(base.eq_s('ּ'))) {
												break lab4
											}
											break lab3
										}
										base.cursor = v_4
									}
									if (!base.slice_from('װ')) {
										return false
									}
									break
								case 2:
									{
										var /** number */ v_5 = base.cursor
										lab5: {
											if (!(base.eq_s('ִ'))) {
												break lab5
											}
											break lab3
										}
										base.cursor = v_5
									}
									if (!base.slice_from('ױ')) {
										return false
									}
									break
								case 3:
									{
										var /** number */ v_6 = base.cursor
										lab6: {
											if (!(base.eq_s('ִ'))) {
												break lab6
											}
											break lab3
										}
										base.cursor = v_6
									}
									if (!base.slice_from('ײ')) {
										return false
									}
									break
								case 4:
									if (!base.slice_from('כ')) {
										return false
									}
									break
								case 5:
									if (!base.slice_from('מ')) {
										return false
									}
									break
								case 6:
									if (!base.slice_from('נ')) {
										return false
									}
									break
								case 7:
									if (!base.slice_from('פ')) {
										return false
									}
									break
								case 8:
									if (!base.slice_from('צ')) {
										return false
									}
									break
							}
							base.cursor = v_3
							break golab2
						}
						base.cursor = v_3
						if (base.cursor >= base.limit) {
							break lab1
						}
						base.cursor++
					}
					continue
				}
				base.cursor = v_2
				break
			}
		}
		base.cursor = v_1
		var /** number */ v_7 = base.cursor
		lab7: {
			while (true) {
				var /** number */ v_8 = base.cursor
				lab8: {
					golab9: while (true) {
						var /** number */ v_9 = base.cursor
						lab10: {
							base.bra = base.cursor
							if (!(base.in_grouping(g_niked, 1456, 1474))) {
								break lab10
							}
							base.ket = base.cursor
							if (!base.slice_del()) {
								return false
							}
							base.cursor = v_9
							break golab9
						}
						base.cursor = v_9
						if (base.cursor >= base.limit) {
							break lab8
						}
						base.cursor++
					}
					continue
				}
				base.cursor = v_8
				break
			}
		}
		base.cursor = v_7
		return true
	}

	/** @return {boolean} */
	function r_mark_regions() {
		I_p1 = base.limit
		var /** number */ v_1 = base.cursor
		lab0: {
			base.bra = base.cursor
			if (!(base.eq_s('גע'))) {
				base.cursor = v_1
				break lab0
			}
			base.ket = base.cursor
			{
				var /** number */ v_2 = base.cursor
				lab1: {
					lab2: {
						var /** number */ v_3 = base.cursor
						lab3: {
							if (!(base.eq_s('לט'))) {
								break lab3
							}
							break lab2
						}
						base.cursor = v_3
						if (!(base.eq_s('בנ'))) {
							break lab1
						}
					}
					base.cursor = v_1
					break lab0
				}
				base.cursor = v_2
			}
			if (!base.slice_from('GE')) {
				return false
			}
		}
		var /** number */ v_4 = base.cursor
		lab4: {
			if (base.find_among(a_1) == 0) {
				base.cursor = v_4
				break lab4
			}
			lab5: {
				var /** number */ v_5 = base.cursor
				lab6: {
					var /** number */ v_6 = base.cursor
					lab7: {
						var /** number */ v_7 = base.cursor
						lab8: {
							if (!(base.eq_s('צוגנ'))) {
								break lab8
							}
							break lab7
						}
						base.cursor = v_7
						lab9: {
							if (!(base.eq_s('צוקט'))) {
								break lab9
							}
							break lab7
						}
						base.cursor = v_7
						if (!(base.eq_s('צוקנ'))) {
							break lab6
						}
					}
					if (base.cursor < base.limit) {
						break lab6
					}
					base.cursor = v_6
					break lab5
				}
				base.cursor = v_5
				lab10: {
					var /** number */ v_8 = base.cursor
					if (!(base.eq_s('געבנ'))) {
						break lab10
					}
					base.cursor = v_8
					break lab5
				}
				base.cursor = v_5
				lab11: {
					base.bra = base.cursor
					if (!(base.eq_s('גע'))) {
						break lab11
					}
					base.ket = base.cursor
					if (!base.slice_from('GE')) {
						return false
					}
					break lab5
				}
				base.cursor = v_5
				base.bra = base.cursor
				if (!(base.eq_s('צו'))) {
					base.cursor = v_4
					break lab4
				}
				base.ket = base.cursor
				if (!base.slice_from('TSU')) {
					return false
				}
			}
		}
		var /** number */ v_9 = base.cursor
		{
			var /** number */ c1 = base.cursor + 3
			if (c1 > base.limit) {
				return false
			}
			base.cursor = c1
		}
		I_x = base.cursor
		base.cursor = v_9
		var /** number */ v_10 = base.cursor
		lab12: {
			if (base.find_among(a_2) == 0) {
				base.cursor = v_10
				break lab12
			}
		}
		{
			var /** number */ v_11 = base.cursor
			lab13: {
				if (!(base.in_grouping(g_consonant, 1489, 1520))) {
					break lab13
				}
				if (!(base.in_grouping(g_consonant, 1489, 1520))) {
					break lab13
				}
				if (!(base.in_grouping(g_consonant, 1489, 1520))) {
					break lab13
				}
				I_p1 = base.cursor
				return false
			}
			base.cursor = v_11
		}
		golab14: while (true) {
			var /** number */ v_12 = base.cursor
			lab15: {
				if (!(base.in_grouping(g_vowel, 1488, 1522))) {
					break lab15
				}
				base.cursor = v_12
				break golab14
			}
			base.cursor = v_12
			if (base.cursor >= base.limit) {
				return false
			}
			base.cursor++
		}
		while (true) {
			lab16: {
				if (!(base.in_grouping(g_vowel, 1488, 1522))) {
					break lab16
				}
				continue
			}
			break
		}
		I_p1 = base.cursor
		lab17: {
			if (I_p1 >= I_x) {
				break lab17
			}
			I_p1 = I_x
		}
		return true
	}

	/** @return {boolean} */
	function r_R1() {
		return I_p1 <= base.cursor
	}

	/** @return {boolean} */
	function r_R1plus3() {
		return I_p1 <= (base.cursor + 3)
	}

	/** @return {boolean} */
	function r_standard_suffix() {
		var /** number */ among_var
		var /** number */ v_1 = base.limit - base.cursor
		lab0: {
			base.ket = base.cursor
			among_var = base.find_among_b(a_4)
			if (among_var == 0) {
				break lab0
			}
			base.bra = base.cursor
			switch (among_var) {
				case 1:
					if (!r_R1()) {
						break lab0
					}
					if (!base.slice_del()) {
						return false
					}
					break
				case 2:
					if (!r_R1()) {
						break lab0
					}
					if (!base.slice_from('יע')) {
						return false
					}
					break
				case 3:
					if (!r_R1()) {
						break lab0
					}
					if (!base.slice_del()) {
						return false
					}
					base.ket = base.cursor
					among_var = base.find_among_b(a_3)
					if (among_var == 0) {
						break lab0
					}
					base.bra = base.cursor
					switch (among_var) {
						case 1:
							if (!base.slice_from('גײ')) {
								return false
							}
							break
						case 2:
							if (!base.slice_from('נעמ')) {
								return false
							}
							break
						case 3:
							if (!base.slice_from('מײד')) {
								return false
							}
							break
						case 4:
							if (!base.slice_from('בײט')) {
								return false
							}
							break
						case 5:
							if (!base.slice_from('בײס')) {
								return false
							}
							break
						case 6:
							if (!base.slice_from('װײז')) {
								return false
							}
							break
						case 7:
							if (!base.slice_from('טרײב')) {
								return false
							}
							break
						case 8:
							if (!base.slice_from('לײט')) {
								return false
							}
							break
						case 9:
							if (!base.slice_from('קלײב')) {
								return false
							}
							break
						case 10:
							if (!base.slice_from('רײב')) {
								return false
							}
							break
						case 11:
							if (!base.slice_from('רײס')) {
								return false
							}
							break
						case 12:
							if (!base.slice_from('שװײג')) {
								return false
							}
							break
						case 13:
							if (!base.slice_from('שמײס')) {
								return false
							}
							break
						case 14:
							if (!base.slice_from('שנײד')) {
								return false
							}
							break
						case 15:
							if (!base.slice_from('שרײב')) {
								return false
							}
							break
						case 16:
							if (!base.slice_from('בינד')) {
								return false
							}
							break
						case 17:
							if (!base.slice_from('װיטש')) {
								return false
							}
							break
						case 18:
							if (!base.slice_from('זינג')) {
								return false
							}
							break
						case 19:
							if (!base.slice_from('טרינק')) {
								return false
							}
							break
						case 20:
							if (!base.slice_from('צװינג')) {
								return false
							}
							break
						case 21:
							if (!base.slice_from('שלינג')) {
								return false
							}
							break
						case 22:
							if (!base.slice_from('בײג')) {
								return false
							}
							break
						case 23:
							if (!base.slice_from('הײב')) {
								return false
							}
							break
						case 24:
							if (!base.slice_from('פארליר')) {
								return false
							}
							break
						case 25:
							if (!base.slice_from('שטײ')) {
								return false
							}
							break
						case 26:
							if (!base.slice_from('שװער')) {
								return false
							}
							break
					}
					break
				case 4:
					lab1: {
						var /** number */ v_2 = base.limit - base.cursor
						lab2: {
							if (!r_R1()) {
								break lab2
							}
							if (!base.slice_del()) {
								return false
							}
							break lab1
						}
						base.cursor = base.limit - v_2
						if (!base.slice_from('ט')) {
							return false
						}
					}
					base.ket = base.cursor
					if (!(base.eq_s_b('בראכ'))) {
						break lab0
					}
					var /** number */ v_3 = base.limit - base.cursor
					lab3: {
						if (!(base.eq_s_b('גע'))) {
							base.cursor = base.limit - v_3
							break lab3
						}
					}
					base.bra = base.cursor
					if (!base.slice_from('ברענג')) {
						return false
					}
					break
				case 5:
					if (!base.slice_from('גײ')) {
						return false
					}
					break
				case 6:
					if (!base.slice_from('נעמ')) {
						return false
					}
					break
				case 7:
					if (!base.slice_from('שרײב')) {
						return false
					}
					break
				case 8:
					if (!base.slice_from('מײד')) {
						return false
					}
					break
				case 9:
					if (!base.slice_from('בײט')) {
						return false
					}
					break
				case 10:
					if (!base.slice_from('בײס')) {
						return false
					}
					break
				case 11:
					if (!base.slice_from('װײז')) {
						return false
					}
					break
				case 12:
					if (!base.slice_from('טרײב')) {
						return false
					}
					break
				case 13:
					if (!base.slice_from('לײט')) {
						return false
					}
					break
				case 14:
					if (!base.slice_from('קלײב')) {
						return false
					}
					break
				case 15:
					if (!base.slice_from('רײב')) {
						return false
					}
					break
				case 16:
					if (!base.slice_from('רײס')) {
						return false
					}
					break
				case 17:
					if (!base.slice_from('שװײג')) {
						return false
					}
					break
				case 18:
					if (!base.slice_from('שמײס')) {
						return false
					}
					break
				case 19:
					if (!base.slice_from('שנײד')) {
						return false
					}
					break
				case 20:
					if (!base.slice_from('בינד')) {
						return false
					}
					break
				case 21:
					if (!base.slice_from('װיטש')) {
						return false
					}
					break
				case 22:
					if (!base.slice_from('זינג')) {
						return false
					}
					break
				case 23:
					if (!base.slice_from('טרינק')) {
						return false
					}
					break
				case 24:
					if (!base.slice_from('צװינג')) {
						return false
					}
					break
				case 25:
					if (!base.slice_from('שלינג')) {
						return false
					}
					break
				case 26:
					if (!base.slice_from('בײג')) {
						return false
					}
					break
				case 27:
					if (!base.slice_from('הײב')) {
						return false
					}
					break
				case 28:
					if (!base.slice_from('פארליר')) {
						return false
					}
					break
				case 29:
					if (!base.slice_from('שטײ')) {
						return false
					}
					break
				case 30:
					if (!base.slice_from('שװער')) {
						return false
					}
					break
				case 31:
					if (!base.slice_from('ברענג')) {
						return false
					}
					break
				case 32:
					if (!r_R1()) {
						break lab0
					}
					if (!base.slice_from('ה')) {
						return false
					}
					break
				case 33:
					lab4: {
						var /** number */ v_4 = base.limit - base.cursor
						lab5: {
							lab6: {
								var /** number */ v_5 = base.limit - base.cursor
								lab7: {
									if (!(base.eq_s_b('ג'))) {
										break lab7
									}
									break lab6
								}
								base.cursor = base.limit - v_5
								if (!(base.eq_s_b('ש'))) {
									break lab5
								}
							}
							var /** number */ v_6 = base.limit - base.cursor
							lab8: {
								if (!r_R1plus3()) {
									base.cursor = base.limit - v_6
									break lab8
								}
								if (!base.slice_from('יס')) {
									return false
								}
							}
							break lab4
						}
						base.cursor = base.limit - v_4
						if (!r_R1()) {
							break lab0
						}
						if (!base.slice_del()) {
							return false
						}
					}
					break
			}
		}
		base.cursor = base.limit - v_1
		var /** number */ v_7 = base.limit - base.cursor
		lab9: {
			base.ket = base.cursor
			among_var = base.find_among_b(a_5)
			if (among_var == 0) {
				break lab9
			}
			base.bra = base.cursor
			switch (among_var) {
				case 1:
					if (!r_R1()) {
						break lab9
					}
					if (!base.slice_del()) {
						return false
					}
					break
				case 2:
					if (!r_R1()) {
						break lab9
					}
					if (!(base.in_grouping_b(g_consonant, 1489, 1520))) {
						break lab9
					}
					if (!base.slice_del()) {
						return false
					}
					break
			}
		}
		base.cursor = base.limit - v_7
		var /** number */ v_8 = base.limit - base.cursor
		lab10: {
			base.ket = base.cursor
			among_var = base.find_among_b(a_6)
			if (among_var == 0) {
				break lab10
			}
			base.bra = base.cursor
			switch (among_var) {
				case 1:
					if (!r_R1()) {
						break lab10
					}
					if (!base.slice_del()) {
						return false
					}
					break
			}
		}
		base.cursor = base.limit - v_8
		var /** number */ v_9 = base.limit - base.cursor
		lab11: {
			while (true) {
				var /** number */ v_10 = base.limit - base.cursor
				lab12: {
					golab13: while (true) {
						var /** number */ v_11 = base.limit - base.cursor
						lab14: {
							base.ket = base.cursor
							lab15: {
								var /** number */ v_12 = base.limit - base.cursor
								lab16: {
									if (!(base.eq_s_b('GE'))) {
										break lab16
									}
									break lab15
								}
								base.cursor = base.limit - v_12
								if (!(base.eq_s_b('TSU'))) {
									break lab14
								}
							}
							base.bra = base.cursor
							if (!base.slice_del()) {
								return false
							}
							base.cursor = base.limit - v_11
							break golab13
						}
						base.cursor = base.limit - v_11
						if (base.cursor <= base.limit_backward) {
							break lab12
						}
						base.cursor--
					}
					continue
				}
				base.cursor = base.limit - v_10
				break
			}
		}
		base.cursor = base.limit - v_9
		return true
	}

	this.stem = /** @return {boolean} */ function () {
		r_prelude()
		var /** number */ v_2 = base.cursor
		r_mark_regions()
		base.cursor = v_2
		base.limit_backward = base.cursor
		base.cursor = base.limit
		r_standard_suffix()
		base.cursor = base.limit_backward
		return true
	}

	/**@return{string}*/
	this['stemWord'] = function (/**string*/ word) {
		base.setCurrent(word)
		this.stem()
		return base.getCurrent()
	}
}

export default YiddishStemmer
