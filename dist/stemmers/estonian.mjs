// Generated by Snowball 2.2.0 - https://snowballstem.org/
// deno-lint-ignore-file
import BaseStemmer from '../core/base-stemmer.mjs'

/** @typedef {{ stemWord(word: string): string }} Stemmer */

/** @type {{ new(): Stemmer }} */
const EstonianStemmer = function () {
	var base = new BaseStemmer()
	/** @const */ var a_0 = [
		['gi', -1, 1],
		['ki', -1, 2],
	]

	/** @const */ var a_1 = [
		['da', -1, 3],
		['mata', -1, 1],
		['b', -1, 3],
		['ksid', -1, 1],
		['nuksid', 3, 1],
		['me', -1, 3],
		['sime', 5, 1],
		['ksime', 6, 1],
		['nuksime', 7, 1],
		['akse', -1, 2],
		['dakse', 9, 1],
		['takse', 9, 1],
		['site', -1, 1],
		['ksite', 12, 1],
		['nuksite', 13, 1],
		['n', -1, 3],
		['sin', 15, 1],
		['ksin', 16, 1],
		['nuksin', 17, 1],
		['daks', -1, 1],
		['taks', -1, 1],
	]

	/** @const */ var a_2 = [
		['aa', -1, -1],
		['ee', -1, -1],
		['ii', -1, -1],
		['oo', -1, -1],
		['uu', -1, -1],
		['ää', -1, -1],
		['õõ', -1, -1],
		['öö', -1, -1],
		['üü', -1, -1],
	]

	/** @const */ var a_3 = [
		['i', -1, 1],
	]

	/** @const */ var a_4 = [
		['lane', -1, 1],
		['line', -1, 3],
		['mine', -1, 2],
		['lasse', -1, 1],
		['lisse', -1, 3],
		['misse', -1, 2],
		['lasi', -1, 1],
		['lisi', -1, 3],
		['misi', -1, 2],
		['last', -1, 1],
		['list', -1, 3],
		['mist', -1, 2],
	]

	/** @const */ var a_5 = [
		['ga', -1, 1],
		['ta', -1, 1],
		['le', -1, 1],
		['sse', -1, 1],
		['l', -1, 1],
		['s', -1, 1],
		['ks', 5, 1],
		['t', -1, 2],
		['lt', 7, 1],
		['st', 7, 1],
	]

	/** @const */ var a_6 = [
		['', -1, 2],
		['las', 0, 1],
		['lis', 0, 1],
		['mis', 0, 1],
		['t', 0, -1],
	]

	/** @const */ var a_7 = [
		['d', -1, 4],
		['sid', 0, 2],
		['de', -1, 4],
		['ikkude', 2, 1],
		['ike', -1, 1],
		['ikke', -1, 1],
		['te', -1, 3],
	]

	/** @const */ var a_8 = [
		['va', -1, -1],
		['du', -1, -1],
		['nu', -1, -1],
		['tu', -1, -1],
	]

	/** @const */ var a_9 = [
		['kk', -1, 1],
		['pp', -1, 2],
		['tt', -1, 3],
	]

	/** @const */ var a_10 = [
		['ma', -1, 2],
		['mai', -1, 1],
		['m', -1, 1],
	]

	/** @const */ var a_11 = [
		['joob', -1, 1],
		['jood', -1, 1],
		['joodakse', 1, 1],
		['jooma', -1, 1],
		['joomata', 3, 1],
		['joome', -1, 1],
		['joon', -1, 1],
		['joote', -1, 1],
		['joovad', -1, 1],
		['juua', -1, 1],
		['juuakse', 9, 1],
		['jäi', -1, 12],
		['jäid', 11, 12],
		['jäime', 11, 12],
		['jäin', 11, 12],
		['jäite', 11, 12],
		['jääb', -1, 12],
		['jääd', -1, 12],
		['jääda', 17, 12],
		['jäädakse', 18, 12],
		['jäädi', 17, 12],
		['jääks', -1, 12],
		['jääksid', 21, 12],
		['jääksime', 21, 12],
		['jääksin', 21, 12],
		['jääksite', 21, 12],
		['jääma', -1, 12],
		['jäämata', 26, 12],
		['jääme', -1, 12],
		['jään', -1, 12],
		['jääte', -1, 12],
		['jäävad', -1, 12],
		['jõi', -1, 1],
		['jõid', 32, 1],
		['jõime', 32, 1],
		['jõin', 32, 1],
		['jõite', 32, 1],
		['keeb', -1, 4],
		['keed', -1, 4],
		['keedakse', 38, 4],
		['keeks', -1, 4],
		['keeksid', 40, 4],
		['keeksime', 40, 4],
		['keeksin', 40, 4],
		['keeksite', 40, 4],
		['keema', -1, 4],
		['keemata', 45, 4],
		['keeme', -1, 4],
		['keen', -1, 4],
		['kees', -1, 4],
		['keeta', -1, 4],
		['keete', -1, 4],
		['keevad', -1, 4],
		['käia', -1, 8],
		['käiakse', 53, 8],
		['käib', -1, 8],
		['käid', -1, 8],
		['käidi', 56, 8],
		['käiks', -1, 8],
		['käiksid', 58, 8],
		['käiksime', 58, 8],
		['käiksin', 58, 8],
		['käiksite', 58, 8],
		['käima', -1, 8],
		['käimata', 63, 8],
		['käime', -1, 8],
		['käin', -1, 8],
		['käis', -1, 8],
		['käite', -1, 8],
		['käivad', -1, 8],
		['laob', -1, 16],
		['laod', -1, 16],
		['laoks', -1, 16],
		['laoksid', 72, 16],
		['laoksime', 72, 16],
		['laoksin', 72, 16],
		['laoksite', 72, 16],
		['laome', -1, 16],
		['laon', -1, 16],
		['laote', -1, 16],
		['laovad', -1, 16],
		['loeb', -1, 14],
		['loed', -1, 14],
		['loeks', -1, 14],
		['loeksid', 83, 14],
		['loeksime', 83, 14],
		['loeksin', 83, 14],
		['loeksite', 83, 14],
		['loeme', -1, 14],
		['loen', -1, 14],
		['loete', -1, 14],
		['loevad', -1, 14],
		['loob', -1, 7],
		['lood', -1, 7],
		['loodi', 93, 7],
		['looks', -1, 7],
		['looksid', 95, 7],
		['looksime', 95, 7],
		['looksin', 95, 7],
		['looksite', 95, 7],
		['looma', -1, 7],
		['loomata', 100, 7],
		['loome', -1, 7],
		['loon', -1, 7],
		['loote', -1, 7],
		['loovad', -1, 7],
		['luua', -1, 7],
		['luuakse', 106, 7],
		['lõi', -1, 6],
		['lõid', 108, 6],
		['lõime', 108, 6],
		['lõin', 108, 6],
		['lõite', 108, 6],
		['lööb', -1, 5],
		['lööd', -1, 5],
		['löödakse', 114, 5],
		['löödi', 114, 5],
		['lööks', -1, 5],
		['lööksid', 117, 5],
		['lööksime', 117, 5],
		['lööksin', 117, 5],
		['lööksite', 117, 5],
		['lööma', -1, 5],
		['löömata', 122, 5],
		['lööme', -1, 5],
		['löön', -1, 5],
		['lööte', -1, 5],
		['löövad', -1, 5],
		['lüüa', -1, 5],
		['lüüakse', 128, 5],
		['müüa', -1, 13],
		['müüakse', 130, 13],
		['müüb', -1, 13],
		['müüd', -1, 13],
		['müüdi', 133, 13],
		['müüks', -1, 13],
		['müüksid', 135, 13],
		['müüksime', 135, 13],
		['müüksin', 135, 13],
		['müüksite', 135, 13],
		['müüma', -1, 13],
		['müümata', 140, 13],
		['müüme', -1, 13],
		['müün', -1, 13],
		['müüs', -1, 13],
		['müüte', -1, 13],
		['müüvad', -1, 13],
		['näeb', -1, 18],
		['näed', -1, 18],
		['näeks', -1, 18],
		['näeksid', 149, 18],
		['näeksime', 149, 18],
		['näeksin', 149, 18],
		['näeksite', 149, 18],
		['näeme', -1, 18],
		['näen', -1, 18],
		['näete', -1, 18],
		['näevad', -1, 18],
		['nägema', -1, 18],
		['nägemata', 158, 18],
		['näha', -1, 18],
		['nähakse', 160, 18],
		['nähti', -1, 18],
		['põeb', -1, 15],
		['põed', -1, 15],
		['põeks', -1, 15],
		['põeksid', 165, 15],
		['põeksime', 165, 15],
		['põeksin', 165, 15],
		['põeksite', 165, 15],
		['põeme', -1, 15],
		['põen', -1, 15],
		['põete', -1, 15],
		['põevad', -1, 15],
		['saab', -1, 2],
		['saad', -1, 2],
		['saada', 175, 2],
		['saadakse', 176, 2],
		['saadi', 175, 2],
		['saaks', -1, 2],
		['saaksid', 179, 2],
		['saaksime', 179, 2],
		['saaksin', 179, 2],
		['saaksite', 179, 2],
		['saama', -1, 2],
		['saamata', 184, 2],
		['saame', -1, 2],
		['saan', -1, 2],
		['saate', -1, 2],
		['saavad', -1, 2],
		['sai', -1, 2],
		['said', 190, 2],
		['saime', 190, 2],
		['sain', 190, 2],
		['saite', 190, 2],
		['sõi', -1, 9],
		['sõid', 195, 9],
		['sõime', 195, 9],
		['sõin', 195, 9],
		['sõite', 195, 9],
		['sööb', -1, 9],
		['sööd', -1, 9],
		['söödakse', 201, 9],
		['söödi', 201, 9],
		['sööks', -1, 9],
		['sööksid', 204, 9],
		['sööksime', 204, 9],
		['sööksin', 204, 9],
		['sööksite', 204, 9],
		['sööma', -1, 9],
		['söömata', 209, 9],
		['sööme', -1, 9],
		['söön', -1, 9],
		['sööte', -1, 9],
		['söövad', -1, 9],
		['süüa', -1, 9],
		['süüakse', 215, 9],
		['teeb', -1, 17],
		['teed', -1, 17],
		['teeks', -1, 17],
		['teeksid', 219, 17],
		['teeksime', 219, 17],
		['teeksin', 219, 17],
		['teeksite', 219, 17],
		['teeme', -1, 17],
		['teen', -1, 17],
		['teete', -1, 17],
		['teevad', -1, 17],
		['tegema', -1, 17],
		['tegemata', 228, 17],
		['teha', -1, 17],
		['tehakse', 230, 17],
		['tehti', -1, 17],
		['toob', -1, 10],
		['tood', -1, 10],
		['toodi', 234, 10],
		['tooks', -1, 10],
		['tooksid', 236, 10],
		['tooksime', 236, 10],
		['tooksin', 236, 10],
		['tooksite', 236, 10],
		['tooma', -1, 10],
		['toomata', 241, 10],
		['toome', -1, 10],
		['toon', -1, 10],
		['toote', -1, 10],
		['toovad', -1, 10],
		['tuua', -1, 10],
		['tuuakse', 247, 10],
		['tõi', -1, 10],
		['tõid', 249, 10],
		['tõime', 249, 10],
		['tõin', 249, 10],
		['tõite', 249, 10],
		['viia', -1, 3],
		['viiakse', 254, 3],
		['viib', -1, 3],
		['viid', -1, 3],
		['viidi', 257, 3],
		['viiks', -1, 3],
		['viiksid', 259, 3],
		['viiksime', 259, 3],
		['viiksin', 259, 3],
		['viiksite', 259, 3],
		['viima', -1, 3],
		['viimata', 264, 3],
		['viime', -1, 3],
		['viin', -1, 3],
		['viisime', -1, 3],
		['viisin', -1, 3],
		['viisite', -1, 3],
		['viite', -1, 3],
		['viivad', -1, 3],
		['võib', -1, 11],
		['võid', -1, 11],
		['võida', 274, 11],
		['võidakse', 275, 11],
		['võidi', 274, 11],
		['võiks', -1, 11],
		['võiksid', 278, 11],
		['võiksime', 278, 11],
		['võiksin', 278, 11],
		['võiksite', 278, 11],
		['võima', -1, 11],
		['võimata', 283, 11],
		['võime', -1, 11],
		['võin', -1, 11],
		['võis', -1, 11],
		['võite', -1, 11],
		['võivad', -1, 11],
	]

	/** @const */ var /** Array<int> */ g_V1 = [17, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 48, 8]

	/** @const */ var /** Array<int> */ g_RV = [17, 65, 16]

	/** @const */ var /** Array<int> */ g_KI = [
		117,
		66,
		6,
		1,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		128,
		0,
		0,
		0,
		16,
	]

	/** @const */ var /** Array<int> */ g_GI = [21, 123, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 48, 8]

	var /** number */ I_p1 = 0

	/** @return {boolean} */
	function r_mark_regions() {
		I_p1 = base.limit
		golab0: while (true) {
			var /** number */ v_1 = base.cursor
			lab1: {
				if (!(base.in_grouping(g_V1, 97, 252))) {
					break lab1
				}
				base.cursor = v_1
				break golab0
			}
			base.cursor = v_1
			if (base.cursor >= base.limit) {
				return false
			}
			base.cursor++
		}
		golab2: while (true) {
			lab3: {
				if (!(base.out_grouping(g_V1, 97, 252))) {
					break lab3
				}
				break golab2
			}
			if (base.cursor >= base.limit) {
				return false
			}
			base.cursor++
		}
		I_p1 = base.cursor
		return true
	}

	/** @return {boolean} */
	function r_emphasis() {
		var /** number */ among_var
		if (base.cursor < I_p1) {
			return false
		}
		var /** number */ v_2 = base.limit_backward
		base.limit_backward = I_p1
		base.ket = base.cursor
		among_var = base.find_among_b(a_0)
		if (among_var == 0) {
			base.limit_backward = v_2
			return false
		}
		base.bra = base.cursor
		base.limit_backward = v_2
		var /** number */ v_3 = base.limit - base.cursor
		{
			var /** number */ c1 = base.cursor - 4
			if (c1 < base.limit_backward) {
				return false
			}
			base.cursor = c1
		}
		base.cursor = base.limit - v_3
		switch (among_var) {
			case 1:
				var /** number */ v_4 = base.limit - base.cursor
				if (!(base.in_grouping_b(g_GI, 97, 252))) {
					return false
				}
				base.cursor = base.limit - v_4
				{
					var /** number */ v_5 = base.limit - base.cursor
					lab0: {
						if (!r_LONGV()) {
							break lab0
						}
						return false
					}
					base.cursor = base.limit - v_5
				}
				if (!base.slice_del()) {
					return false
				}
				break
			case 2:
				if (!(base.in_grouping_b(g_KI, 98, 382))) {
					return false
				}
				if (!base.slice_del()) {
					return false
				}
				break
		}
		return true
	}

	/** @return {boolean} */
	function r_verb() {
		var /** number */ among_var
		if (base.cursor < I_p1) {
			return false
		}
		var /** number */ v_2 = base.limit_backward
		base.limit_backward = I_p1
		base.ket = base.cursor
		among_var = base.find_among_b(a_1)
		if (among_var == 0) {
			base.limit_backward = v_2
			return false
		}
		base.bra = base.cursor
		base.limit_backward = v_2
		switch (among_var) {
			case 1:
				if (!base.slice_del()) {
					return false
				}
				break
			case 2:
				if (!base.slice_from('a')) {
					return false
				}
				break
			case 3:
				if (!(base.in_grouping_b(g_V1, 97, 252))) {
					return false
				}
				if (!base.slice_del()) {
					return false
				}
				break
		}
		return true
	}

	/** @return {boolean} */
	function r_LONGV() {
		if (base.find_among_b(a_2) == 0) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_i_plural() {
		if (base.cursor < I_p1) {
			return false
		}
		var /** number */ v_2 = base.limit_backward
		base.limit_backward = I_p1
		base.ket = base.cursor
		if (base.find_among_b(a_3) == 0) {
			base.limit_backward = v_2
			return false
		}
		base.bra = base.cursor
		base.limit_backward = v_2
		if (!(base.in_grouping_b(g_RV, 97, 117))) {
			return false
		}
		if (!base.slice_del()) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_special_noun_endings() {
		var /** number */ among_var
		if (base.cursor < I_p1) {
			return false
		}
		var /** number */ v_2 = base.limit_backward
		base.limit_backward = I_p1
		base.ket = base.cursor
		among_var = base.find_among_b(a_4)
		if (among_var == 0) {
			base.limit_backward = v_2
			return false
		}
		base.bra = base.cursor
		base.limit_backward = v_2
		switch (among_var) {
			case 1:
				if (!base.slice_from('lase')) {
					return false
				}
				break
			case 2:
				if (!base.slice_from('mise')) {
					return false
				}
				break
			case 3:
				if (!base.slice_from('lise')) {
					return false
				}
				break
		}
		return true
	}

	/** @return {boolean} */
	function r_case_ending() {
		var /** number */ among_var
		if (base.cursor < I_p1) {
			return false
		}
		var /** number */ v_2 = base.limit_backward
		base.limit_backward = I_p1
		base.ket = base.cursor
		among_var = base.find_among_b(a_5)
		if (among_var == 0) {
			base.limit_backward = v_2
			return false
		}
		base.bra = base.cursor
		base.limit_backward = v_2
		switch (among_var) {
			case 1:
				lab0: {
					var /** number */ v_3 = base.limit - base.cursor
					lab1: {
						if (!(base.in_grouping_b(g_RV, 97, 117))) {
							break lab1
						}
						break lab0
					}
					base.cursor = base.limit - v_3
					if (!r_LONGV()) {
						return false
					}
				}
				break
			case 2:
				var /** number */ v_4 = base.limit - base.cursor
				{
					var /** number */ c1 = base.cursor - 4
					if (c1 < base.limit_backward) {
						return false
					}
					base.cursor = c1
				}
				base.cursor = base.limit - v_4
				break
		}
		if (!base.slice_del()) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_plural_three_first_cases() {
		var /** number */ among_var
		if (base.cursor < I_p1) {
			return false
		}
		var /** number */ v_2 = base.limit_backward
		base.limit_backward = I_p1
		base.ket = base.cursor
		among_var = base.find_among_b(a_7)
		if (among_var == 0) {
			base.limit_backward = v_2
			return false
		}
		base.bra = base.cursor
		base.limit_backward = v_2
		switch (among_var) {
			case 1:
				if (!base.slice_from('iku')) {
					return false
				}
				break
			case 2:
				{
					var /** number */ v_3 = base.limit - base.cursor
					lab0: {
						if (!r_LONGV()) {
							break lab0
						}
						return false
					}
					base.cursor = base.limit - v_3
				}
				if (!base.slice_del()) {
					return false
				}
				break
			case 3:
				lab1: {
					var /** number */ v_4 = base.limit - base.cursor
					lab2: {
						var /** number */ v_5 = base.limit - base.cursor
						{
							var /** number */ c1 = base.cursor - 4
							if (c1 < base.limit_backward) {
								break lab2
							}
							base.cursor = c1
						}
						base.cursor = base.limit - v_5
						among_var = base.find_among_b(a_6)
						switch (among_var) {
							case 1:
								if (!base.slice_from('e')) {
									return false
								}
								break
							case 2:
								if (!base.slice_del()) {
									return false
								}
								break
						}
						break lab1
					}
					base.cursor = base.limit - v_4
					if (!base.slice_from('t')) {
						return false
					}
				}
				break
			case 4:
				lab3: {
					var /** number */ v_6 = base.limit - base.cursor
					lab4: {
						if (!(base.in_grouping_b(g_RV, 97, 117))) {
							break lab4
						}
						break lab3
					}
					base.cursor = base.limit - v_6
					if (!r_LONGV()) {
						return false
					}
				}
				if (!base.slice_del()) {
					return false
				}
				break
		}
		return true
	}

	/** @return {boolean} */
	function r_nu() {
		if (base.cursor < I_p1) {
			return false
		}
		var /** number */ v_2 = base.limit_backward
		base.limit_backward = I_p1
		base.ket = base.cursor
		if (base.find_among_b(a_8) == 0) {
			base.limit_backward = v_2
			return false
		}
		base.bra = base.cursor
		base.limit_backward = v_2
		if (!base.slice_del()) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_undouble_kpt() {
		var /** number */ among_var
		if (!(base.in_grouping_b(g_V1, 97, 252))) {
			return false
		}
		if (I_p1 > base.cursor) {
			return false
		}
		base.ket = base.cursor
		among_var = base.find_among_b(a_9)
		if (among_var == 0) {
			return false
		}
		base.bra = base.cursor
		switch (among_var) {
			case 1:
				if (!base.slice_from('k')) {
					return false
				}
				break
			case 2:
				if (!base.slice_from('p')) {
					return false
				}
				break
			case 3:
				if (!base.slice_from('t')) {
					return false
				}
				break
		}
		return true
	}

	/** @return {boolean} */
	function r_degrees() {
		var /** number */ among_var
		if (base.cursor < I_p1) {
			return false
		}
		var /** number */ v_2 = base.limit_backward
		base.limit_backward = I_p1
		base.ket = base.cursor
		among_var = base.find_among_b(a_10)
		if (among_var == 0) {
			base.limit_backward = v_2
			return false
		}
		base.bra = base.cursor
		base.limit_backward = v_2
		switch (among_var) {
			case 1:
				if (!(base.in_grouping_b(g_RV, 97, 117))) {
					return false
				}
				if (!base.slice_del()) {
					return false
				}
				break
			case 2:
				if (!base.slice_del()) {
					return false
				}
				break
		}
		return true
	}

	/** @return {boolean} */
	function r_substantive() {
		var /** number */ v_1 = base.limit - base.cursor
		r_special_noun_endings()
		base.cursor = base.limit - v_1
		var /** number */ v_2 = base.limit - base.cursor
		r_case_ending()
		base.cursor = base.limit - v_2
		var /** number */ v_3 = base.limit - base.cursor
		r_plural_three_first_cases()
		base.cursor = base.limit - v_3
		var /** number */ v_4 = base.limit - base.cursor
		r_degrees()
		base.cursor = base.limit - v_4
		var /** number */ v_5 = base.limit - base.cursor
		r_i_plural()
		base.cursor = base.limit - v_5
		var /** number */ v_6 = base.limit - base.cursor
		r_nu()
		base.cursor = base.limit - v_6
		return true
	}

	/** @return {boolean} */
	function r_verb_exceptions() {
		var /** number */ among_var
		base.bra = base.cursor
		among_var = base.find_among(a_11)
		if (among_var == 0) {
			return false
		}
		base.ket = base.cursor
		if (base.cursor < base.limit) {
			return false
		}
		switch (among_var) {
			case 1:
				if (!base.slice_from('joo')) {
					return false
				}
				break
			case 2:
				if (!base.slice_from('saa')) {
					return false
				}
				break
			case 3:
				if (!base.slice_from('viima')) {
					return false
				}
				break
			case 4:
				if (!base.slice_from('keesi')) {
					return false
				}
				break
			case 5:
				if (!base.slice_from('löö')) {
					return false
				}
				break
			case 6:
				if (!base.slice_from('lõi')) {
					return false
				}
				break
			case 7:
				if (!base.slice_from('loo')) {
					return false
				}
				break
			case 8:
				if (!base.slice_from('käisi')) {
					return false
				}
				break
			case 9:
				if (!base.slice_from('söö')) {
					return false
				}
				break
			case 10:
				if (!base.slice_from('too')) {
					return false
				}
				break
			case 11:
				if (!base.slice_from('võisi')) {
					return false
				}
				break
			case 12:
				if (!base.slice_from('jääma')) {
					return false
				}
				break
			case 13:
				if (!base.slice_from('müüsi')) {
					return false
				}
				break
			case 14:
				if (!base.slice_from('luge')) {
					return false
				}
				break
			case 15:
				if (!base.slice_from('põde')) {
					return false
				}
				break
			case 16:
				if (!base.slice_from('ladu')) {
					return false
				}
				break
			case 17:
				if (!base.slice_from('tegi')) {
					return false
				}
				break
			case 18:
				if (!base.slice_from('nägi')) {
					return false
				}
				break
		}
		return true
	}

	this.stem = /** @return {boolean} */ function () {
		{
			var /** number */ v_1 = base.cursor
			lab0: {
				if (!r_verb_exceptions()) {
					break lab0
				}
				return false
			}
			base.cursor = v_1
		}
		var /** number */ v_2 = base.cursor
		r_mark_regions()
		base.cursor = v_2
		base.limit_backward = base.cursor
		base.cursor = base.limit
		var /** number */ v_3 = base.limit - base.cursor
		r_emphasis()
		base.cursor = base.limit - v_3
		var /** number */ v_4 = base.limit - base.cursor
		lab1: {
			lab2: {
				var /** number */ v_5 = base.limit - base.cursor
				lab3: {
					if (!r_verb()) {
						break lab3
					}
					break lab2
				}
				base.cursor = base.limit - v_5
				r_substantive()
			}
		}
		base.cursor = base.limit - v_4
		var /** number */ v_6 = base.limit - base.cursor
		r_undouble_kpt()
		base.cursor = base.limit - v_6
		base.cursor = base.limit_backward
		return true
	}

	/**@return{string}*/
	this['stemWord'] = function (/**string*/ word) {
		base.setCurrent(word)
		this.stem()
		return base.getCurrent()
	}
}

export default EstonianStemmer
