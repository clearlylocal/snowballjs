// Generated by Snowball 2.2.0 - https://snowballstem.org/
// deno-lint-ignore-file
import BaseStemmer from '../core/base-stemmer.mjs'

/** @typedef {{ stemWord(word: string): string }} Stemmer */

/** @type {{ new(): Stemmer }} */
const RussianStemmer = function () {
	var base = new BaseStemmer()
	/** @const */ var a_0 = [
		['в', -1, 1],
		['ив', 0, 2],
		['ыв', 0, 2],
		['вши', -1, 1],
		['ивши', 3, 2],
		['ывши', 3, 2],
		['вшись', -1, 1],
		['ившись', 6, 2],
		['ывшись', 6, 2],
	]

	/** @const */ var a_1 = [
		['ее', -1, 1],
		['ие', -1, 1],
		['ое', -1, 1],
		['ые', -1, 1],
		['ими', -1, 1],
		['ыми', -1, 1],
		['ей', -1, 1],
		['ий', -1, 1],
		['ой', -1, 1],
		['ый', -1, 1],
		['ем', -1, 1],
		['им', -1, 1],
		['ом', -1, 1],
		['ым', -1, 1],
		['его', -1, 1],
		['ого', -1, 1],
		['ему', -1, 1],
		['ому', -1, 1],
		['их', -1, 1],
		['ых', -1, 1],
		['ею', -1, 1],
		['ою', -1, 1],
		['ую', -1, 1],
		['юю', -1, 1],
		['ая', -1, 1],
		['яя', -1, 1],
	]

	/** @const */ var a_2 = [
		['ем', -1, 1],
		['нн', -1, 1],
		['вш', -1, 1],
		['ивш', 2, 2],
		['ывш', 2, 2],
		['щ', -1, 1],
		['ющ', 5, 1],
		['ующ', 6, 2],
	]

	/** @const */ var a_3 = [
		['сь', -1, 1],
		['ся', -1, 1],
	]

	/** @const */ var a_4 = [
		['ла', -1, 1],
		['ила', 0, 2],
		['ыла', 0, 2],
		['на', -1, 1],
		['ена', 3, 2],
		['ете', -1, 1],
		['ите', -1, 2],
		['йте', -1, 1],
		['ейте', 7, 2],
		['уйте', 7, 2],
		['ли', -1, 1],
		['или', 10, 2],
		['ыли', 10, 2],
		['й', -1, 1],
		['ей', 13, 2],
		['уй', 13, 2],
		['л', -1, 1],
		['ил', 16, 2],
		['ыл', 16, 2],
		['ем', -1, 1],
		['им', -1, 2],
		['ым', -1, 2],
		['н', -1, 1],
		['ен', 22, 2],
		['ло', -1, 1],
		['ило', 24, 2],
		['ыло', 24, 2],
		['но', -1, 1],
		['ено', 27, 2],
		['нно', 27, 1],
		['ет', -1, 1],
		['ует', 30, 2],
		['ит', -1, 2],
		['ыт', -1, 2],
		['ют', -1, 1],
		['уют', 34, 2],
		['ят', -1, 2],
		['ны', -1, 1],
		['ены', 37, 2],
		['ть', -1, 1],
		['ить', 39, 2],
		['ыть', 39, 2],
		['ешь', -1, 1],
		['ишь', -1, 2],
		['ю', -1, 2],
		['ую', 44, 2],
	]

	/** @const */ var a_5 = [
		['а', -1, 1],
		['ев', -1, 1],
		['ов', -1, 1],
		['е', -1, 1],
		['ие', 3, 1],
		['ье', 3, 1],
		['и', -1, 1],
		['еи', 6, 1],
		['ии', 6, 1],
		['ами', 6, 1],
		['ями', 6, 1],
		['иями', 10, 1],
		['й', -1, 1],
		['ей', 12, 1],
		['ией', 13, 1],
		['ий', 12, 1],
		['ой', 12, 1],
		['ам', -1, 1],
		['ем', -1, 1],
		['ием', 18, 1],
		['ом', -1, 1],
		['ям', -1, 1],
		['иям', 21, 1],
		['о', -1, 1],
		['у', -1, 1],
		['ах', -1, 1],
		['ях', -1, 1],
		['иях', 26, 1],
		['ы', -1, 1],
		['ь', -1, 1],
		['ю', -1, 1],
		['ию', 30, 1],
		['ью', 30, 1],
		['я', -1, 1],
		['ия', 33, 1],
		['ья', 33, 1],
	]

	/** @const */ var a_6 = [
		['ост', -1, 1],
		['ость', -1, 1],
	]

	/** @const */ var a_7 = [
		['ейше', -1, 1],
		['н', -1, 2],
		['ейш', -1, 1],
		['ь', -1, 3],
	]

	/** @const */ var /** Array<int> */ g_v = [33, 65, 8, 232]

	var /** number */ I_p2 = 0
	var /** number */ I_pV = 0

	/** @return {boolean} */
	function r_mark_regions() {
		I_pV = base.limit
		I_p2 = base.limit
		var /** number */ v_1 = base.cursor
		lab0: {
			golab1: while (true) {
				lab2: {
					if (!(base.in_grouping(g_v, 1072, 1103))) {
						break lab2
					}
					break golab1
				}
				if (base.cursor >= base.limit) {
					break lab0
				}
				base.cursor++
			}
			I_pV = base.cursor
			golab3: while (true) {
				lab4: {
					if (!(base.out_grouping(g_v, 1072, 1103))) {
						break lab4
					}
					break golab3
				}
				if (base.cursor >= base.limit) {
					break lab0
				}
				base.cursor++
			}
			golab5: while (true) {
				lab6: {
					if (!(base.in_grouping(g_v, 1072, 1103))) {
						break lab6
					}
					break golab5
				}
				if (base.cursor >= base.limit) {
					break lab0
				}
				base.cursor++
			}
			golab7: while (true) {
				lab8: {
					if (!(base.out_grouping(g_v, 1072, 1103))) {
						break lab8
					}
					break golab7
				}
				if (base.cursor >= base.limit) {
					break lab0
				}
				base.cursor++
			}
			I_p2 = base.cursor
		}
		base.cursor = v_1
		return true
	}

	/** @return {boolean} */
	function r_R2() {
		return I_p2 <= base.cursor
	}

	/** @return {boolean} */
	function r_perfective_gerund() {
		var /** number */ among_var
		base.ket = base.cursor
		among_var = base.find_among_b(a_0)
		if (among_var == 0) {
			return false
		}
		base.bra = base.cursor
		switch (among_var) {
			case 1:
				lab0: {
					var /** number */ v_1 = base.limit - base.cursor
					lab1: {
						if (!(base.eq_s_b('а'))) {
							break lab1
						}
						break lab0
					}
					base.cursor = base.limit - v_1
					if (!(base.eq_s_b('я'))) {
						return false
					}
				}
				if (!base.slice_del()) {
					return false
				}
				break
			case 2:
				if (!base.slice_del()) {
					return false
				}
				break
		}
		return true
	}

	/** @return {boolean} */
	function r_adjective() {
		base.ket = base.cursor
		if (base.find_among_b(a_1) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_adjectival() {
		var /** number */ among_var
		if (!r_adjective()) {
			return false
		}
		var /** number */ v_1 = base.limit - base.cursor
		lab0: {
			base.ket = base.cursor
			among_var = base.find_among_b(a_2)
			if (among_var == 0) {
				base.cursor = base.limit - v_1
				break lab0
			}
			base.bra = base.cursor
			switch (among_var) {
				case 1:
					lab1: {
						var /** number */ v_2 = base.limit - base.cursor
						lab2: {
							if (!(base.eq_s_b('а'))) {
								break lab2
							}
							break lab1
						}
						base.cursor = base.limit - v_2
						if (!(base.eq_s_b('я'))) {
							base.cursor = base.limit - v_1
							break lab0
						}
					}
					if (!base.slice_del()) {
						return false
					}
					break
				case 2:
					if (!base.slice_del()) {
						return false
					}
					break
			}
		}
		return true
	}

	/** @return {boolean} */
	function r_reflexive() {
		base.ket = base.cursor
		if (base.find_among_b(a_3) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_verb() {
		var /** number */ among_var
		base.ket = base.cursor
		among_var = base.find_among_b(a_4)
		if (among_var == 0) {
			return false
		}
		base.bra = base.cursor
		switch (among_var) {
			case 1:
				lab0: {
					var /** number */ v_1 = base.limit - base.cursor
					lab1: {
						if (!(base.eq_s_b('а'))) {
							break lab1
						}
						break lab0
					}
					base.cursor = base.limit - v_1
					if (!(base.eq_s_b('я'))) {
						return false
					}
				}
				if (!base.slice_del()) {
					return false
				}
				break
			case 2:
				if (!base.slice_del()) {
					return false
				}
				break
		}
		return true
	}

	/** @return {boolean} */
	function r_noun() {
		base.ket = base.cursor
		if (base.find_among_b(a_5) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_derivational() {
		base.ket = base.cursor
		if (base.find_among_b(a_6) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!r_R2()) {
			return false
		}
		if (!base.slice_del()) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_tidy_up() {
		var /** number */ among_var
		base.ket = base.cursor
		among_var = base.find_among_b(a_7)
		if (among_var == 0) {
			return false
		}
		base.bra = base.cursor
		switch (among_var) {
			case 1:
				if (!base.slice_del()) {
					return false
				}
				base.ket = base.cursor
				if (!(base.eq_s_b('н'))) {
					return false
				}
				base.bra = base.cursor
				if (!(base.eq_s_b('н'))) {
					return false
				}
				if (!base.slice_del()) {
					return false
				}
				break
			case 2:
				if (!(base.eq_s_b('н'))) {
					return false
				}
				if (!base.slice_del()) {
					return false
				}
				break
			case 3:
				if (!base.slice_del()) {
					return false
				}
				break
		}
		return true
	}

	this.stem = /** @return {boolean} */ function () {
		var /** number */ v_1 = base.cursor
		lab0: {
			while (true) {
				var /** number */ v_2 = base.cursor
				lab1: {
					golab2: while (true) {
						var /** number */ v_3 = base.cursor
						lab3: {
							base.bra = base.cursor
							if (!(base.eq_s('ё'))) {
								break lab3
							}
							base.ket = base.cursor
							base.cursor = v_3
							break golab2
						}
						base.cursor = v_3
						if (base.cursor >= base.limit) {
							break lab1
						}
						base.cursor++
					}
					if (!base.slice_from('е')) {
						return false
					}
					continue
				}
				base.cursor = v_2
				break
			}
		}
		base.cursor = v_1
		r_mark_regions()
		base.limit_backward = base.cursor
		base.cursor = base.limit
		if (base.cursor < I_pV) {
			return false
		}
		var /** number */ v_6 = base.limit_backward
		base.limit_backward = I_pV
		var /** number */ v_7 = base.limit - base.cursor
		lab4: {
			lab5: {
				var /** number */ v_8 = base.limit - base.cursor
				lab6: {
					if (!r_perfective_gerund()) {
						break lab6
					}
					break lab5
				}
				base.cursor = base.limit - v_8
				var /** number */ v_9 = base.limit - base.cursor
				lab7: {
					if (!r_reflexive()) {
						base.cursor = base.limit - v_9
						break lab7
					}
				}
				lab8: {
					var /** number */ v_10 = base.limit - base.cursor
					lab9: {
						if (!r_adjectival()) {
							break lab9
						}
						break lab8
					}
					base.cursor = base.limit - v_10
					lab10: {
						if (!r_verb()) {
							break lab10
						}
						break lab8
					}
					base.cursor = base.limit - v_10
					if (!r_noun()) {
						break lab4
					}
				}
			}
		}
		base.cursor = base.limit - v_7
		var /** number */ v_11 = base.limit - base.cursor
		lab11: {
			base.ket = base.cursor
			if (!(base.eq_s_b('и'))) {
				base.cursor = base.limit - v_11
				break lab11
			}
			base.bra = base.cursor
			if (!base.slice_del()) {
				return false
			}
		}
		var /** number */ v_12 = base.limit - base.cursor
		r_derivational()
		base.cursor = base.limit - v_12
		var /** number */ v_13 = base.limit - base.cursor
		r_tidy_up()
		base.cursor = base.limit - v_13
		base.limit_backward = v_6
		base.cursor = base.limit_backward
		return true
	}

	/**@return{string}*/
	this['stemWord'] = function (/**string*/ word) {
		base.setCurrent(word)
		this.stem()
		return base.getCurrent()
	}
}

export default RussianStemmer
