// Generated by Snowball 2.2.0 - https://snowballstem.org/
// deno-lint-ignore-file
import BaseStemmer from '../core/base-stemmer.mjs'

/** @typedef {{ stemWord(word: string): string }} Stemmer */

/** @type {{ new(): Stemmer }} */
const NepaliStemmer = function () {
	var base = new BaseStemmer()
	/** @const */ var a_0 = [
		['लाइ', -1, 1],
		['लाई', -1, 1],
		['सँग', -1, 1],
		['संग', -1, 1],
		['मार्फत', -1, 1],
		['रत', -1, 1],
		['का', -1, 2],
		['मा', -1, 1],
		['द्वारा', -1, 1],
		['कि', -1, 2],
		['पछि', -1, 1],
		['की', -1, 2],
		['ले', -1, 1],
		['कै', -1, 2],
		['सँगै', -1, 1],
		['मै', -1, 1],
		['को', -1, 2],
	]

	/** @const */ var a_1 = [
		['ँ', -1, -1],
		['ं', -1, -1],
		['ै', -1, -1],
	]

	/** @const */ var a_2 = [
		['ँ', -1, 1],
		['ं', -1, 1],
		['ै', -1, 2],
	]

	/** @const */ var a_3 = [
		['थिए', -1, 1],
		['छ', -1, 1],
		['इछ', 1, 1],
		['एछ', 1, 1],
		['िछ', 1, 1],
		['ेछ', 1, 1],
		['नेछ', 5, 1],
		['हुनेछ', 6, 1],
		['इन्छ', 1, 1],
		['िन्छ', 1, 1],
		['हुन्छ', 1, 1],
		['एका', -1, 1],
		['इएका', 11, 1],
		['िएका', 11, 1],
		['ेका', -1, 1],
		['नेका', 14, 1],
		['दा', -1, 1],
		['इदा', 16, 1],
		['िदा', 16, 1],
		['देखि', -1, 1],
		['माथि', -1, 1],
		['एकी', -1, 1],
		['इएकी', 21, 1],
		['िएकी', 21, 1],
		['ेकी', -1, 1],
		['देखी', -1, 1],
		['थी', -1, 1],
		['दी', -1, 1],
		['छु', -1, 1],
		['एछु', 28, 1],
		['ेछु', 28, 1],
		['नेछु', 30, 1],
		['नु', -1, 1],
		['हरु', -1, 1],
		['हरू', -1, 1],
		['छे', -1, 1],
		['थे', -1, 1],
		['ने', -1, 1],
		['एकै', -1, 1],
		['ेकै', -1, 1],
		['नेकै', 39, 1],
		['दै', -1, 1],
		['इदै', 41, 1],
		['िदै', 41, 1],
		['एको', -1, 1],
		['इएको', 44, 1],
		['िएको', 44, 1],
		['ेको', -1, 1],
		['नेको', 47, 1],
		['दो', -1, 1],
		['इदो', 49, 1],
		['िदो', 49, 1],
		['यो', -1, 1],
		['इयो', 52, 1],
		['भयो', 52, 1],
		['ियो', 52, 1],
		['थियो', 55, 1],
		['दियो', 55, 1],
		['थ्यो', 52, 1],
		['छौ', -1, 1],
		['इछौ', 59, 1],
		['एछौ', 59, 1],
		['िछौ', 59, 1],
		['ेछौ', 59, 1],
		['नेछौ', 63, 1],
		['यौ', -1, 1],
		['थियौ', 65, 1],
		['छ्यौ', 65, 1],
		['थ्यौ', 65, 1],
		['छन्', -1, 1],
		['इछन्', 69, 1],
		['एछन्', 69, 1],
		['िछन्', 69, 1],
		['ेछन्', 69, 1],
		['नेछन्', 73, 1],
		['लान्', -1, 1],
		['छिन्', -1, 1],
		['थिन्', -1, 1],
		['पर्', -1, 1],
		['इस्', -1, 1],
		['थिइस्', 79, 1],
		['छस्', -1, 1],
		['इछस्', 81, 1],
		['एछस्', 81, 1],
		['िछस्', 81, 1],
		['ेछस्', 81, 1],
		['नेछस्', 85, 1],
		['िस्', -1, 1],
		['थिस्', 87, 1],
		['छेस्', -1, 1],
		['होस्', -1, 1],
	]

	/** @return {boolean} */
	function r_remove_category_1() {
		var /** number */ among_var
		base.ket = base.cursor
		among_var = base.find_among_b(a_0)
		if (among_var == 0) {
			return false
		}
		base.bra = base.cursor
		switch (among_var) {
			case 1:
				if (!base.slice_del()) {
					return false
				}
				break
			case 2:
				lab0: {
					var /** number */ v_1 = base.limit - base.cursor
					lab1: {
						lab2: {
							var /** number */ v_2 = base.limit - base.cursor
							lab3: {
								if (!(base.eq_s_b('ए'))) {
									break lab3
								}
								break lab2
							}
							base.cursor = base.limit - v_2
							if (!(base.eq_s_b('े'))) {
								break lab1
							}
						}
						break lab0
					}
					base.cursor = base.limit - v_1
					if (!base.slice_del()) {
						return false
					}
				}
				break
		}
		return true
	}

	/** @return {boolean} */
	function r_check_category_2() {
		base.ket = base.cursor
		if (base.find_among_b(a_1) == 0) {
			return false
		}
		base.bra = base.cursor
		return true
	}

	/** @return {boolean} */
	function r_remove_category_2() {
		var /** number */ among_var
		base.ket = base.cursor
		among_var = base.find_among_b(a_2)
		if (among_var == 0) {
			return false
		}
		base.bra = base.cursor
		switch (among_var) {
			case 1:
				lab0: {
					var /** number */ v_1 = base.limit - base.cursor
					lab1: {
						if (!(base.eq_s_b('यौ'))) {
							break lab1
						}
						break lab0
					}
					base.cursor = base.limit - v_1
					lab2: {
						if (!(base.eq_s_b('छौ'))) {
							break lab2
						}
						break lab0
					}
					base.cursor = base.limit - v_1
					lab3: {
						if (!(base.eq_s_b('नौ'))) {
							break lab3
						}
						break lab0
					}
					base.cursor = base.limit - v_1
					if (!(base.eq_s_b('थे'))) {
						return false
					}
				}
				if (!base.slice_del()) {
					return false
				}
				break
			case 2:
				if (!(base.eq_s_b('त्र'))) {
					return false
				}
				if (!base.slice_del()) {
					return false
				}
				break
		}
		return true
	}

	/** @return {boolean} */
	function r_remove_category_3() {
		base.ket = base.cursor
		if (base.find_among_b(a_3) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		return true
	}

	this.stem = /** @return {boolean} */ function () {
		base.limit_backward = base.cursor
		base.cursor = base.limit
		var /** number */ v_1 = base.limit - base.cursor
		r_remove_category_1()
		base.cursor = base.limit - v_1
		var /** number */ v_2 = base.limit - base.cursor
		lab0: {
			while (true) {
				var /** number */ v_3 = base.limit - base.cursor
				lab1: {
					var /** number */ v_4 = base.limit - base.cursor
					lab2: {
						var /** number */ v_5 = base.limit - base.cursor
						if (!r_check_category_2()) {
							break lab2
						}
						base.cursor = base.limit - v_5
						if (!r_remove_category_2()) {
							break lab2
						}
					}
					base.cursor = base.limit - v_4
					if (!r_remove_category_3()) {
						break lab1
					}
					continue
				}
				base.cursor = base.limit - v_3
				break
			}
		}
		base.cursor = base.limit - v_2
		base.cursor = base.limit_backward
		return true
	}

	/**@return{string}*/
	this['stemWord'] = function (/**string*/ word) {
		base.setCurrent(word)
		this.stem()
		return base.getCurrent()
	}
}

export default NepaliStemmer
