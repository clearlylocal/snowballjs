// Generated by Snowball 2.2.0 - https://snowballstem.org/
// deno-lint-ignore-file
import BaseStemmer from '../core/base-stemmer.mjs'

/** @typedef {{ stemWord(word: string): string }} Stemmer */

/** @type {{ new(): Stemmer }} */
const GreekStemmer = function () {
	var base = new BaseStemmer()
	/** @const */ var a_0 = [
		['', -1, 25],
		['Ά', 0, 1],
		['Έ', 0, 5],
		['Ή', 0, 7],
		['Ί', 0, 9],
		['Ό', 0, 15],
		['Ύ', 0, 20],
		['Ώ', 0, 24],
		['ΐ', 0, 7],
		['Α', 0, 1],
		['Β', 0, 2],
		['Γ', 0, 3],
		['Δ', 0, 4],
		['Ε', 0, 5],
		['Ζ', 0, 6],
		['Η', 0, 7],
		['Θ', 0, 8],
		['Ι', 0, 9],
		['Κ', 0, 10],
		['Λ', 0, 11],
		['Μ', 0, 12],
		['Ν', 0, 13],
		['Ξ', 0, 14],
		['Ο', 0, 15],
		['Π', 0, 16],
		['Ρ', 0, 17],
		['Σ', 0, 18],
		['Τ', 0, 19],
		['Υ', 0, 20],
		['Φ', 0, 21],
		['Χ', 0, 22],
		['Ψ', 0, 23],
		['Ω', 0, 24],
		['Ϊ', 0, 9],
		['Ϋ', 0, 20],
		['ά', 0, 1],
		['έ', 0, 5],
		['ή', 0, 7],
		['ί', 0, 9],
		['ΰ', 0, 20],
		['ς', 0, 18],
		['ϊ', 0, 7],
		['ϋ', 0, 20],
		['ό', 0, 15],
		['ύ', 0, 20],
		['ώ', 0, 24],
	]

	/** @const */ var a_1 = [
		['σκαγια', -1, 2],
		['φαγια', -1, 1],
		['ολογια', -1, 3],
		['σογια', -1, 4],
		['τατογια', -1, 5],
		['κρεατα', -1, 6],
		['περατα', -1, 7],
		['τερατα', -1, 8],
		['γεγονοτα', -1, 11],
		['καθεστωτα', -1, 10],
		['φωτα', -1, 9],
		['περατη', -1, 7],
		['σκαγιων', -1, 2],
		['φαγιων', -1, 1],
		['ολογιων', -1, 3],
		['σογιων', -1, 4],
		['τατογιων', -1, 5],
		['κρεατων', -1, 6],
		['περατων', -1, 7],
		['τερατων', -1, 8],
		['γεγονοτων', -1, 11],
		['καθεστωτων', -1, 10],
		['φωτων', -1, 9],
		['κρεασ', -1, 6],
		['περασ', -1, 7],
		['τερασ', -1, 8],
		['γεγονοσ', -1, 11],
		['κρεατοσ', -1, 6],
		['περατοσ', -1, 7],
		['τερατοσ', -1, 8],
		['γεγονοτοσ', -1, 11],
		['καθεστωτοσ', -1, 10],
		['φωτοσ', -1, 9],
		['καθεστωσ', -1, 10],
		['φωσ', -1, 9],
		['σκαγιου', -1, 2],
		['φαγιου', -1, 1],
		['ολογιου', -1, 3],
		['σογιου', -1, 4],
		['τατογιου', -1, 5],
	]

	/** @const */ var a_2 = [
		['πα', -1, 1],
		['ξαναπα', 0, 1],
		['επα', 0, 1],
		['περιπα', 0, 1],
		['αναμπα', 0, 1],
		['εμπα', 0, 1],
		['β', -1, 2],
		['δανε', -1, 1],
		['βαθυρι', -1, 2],
		['βαρκ', -1, 2],
		['μαρκ', -1, 2],
		['λ', -1, 2],
		['μ', -1, 2],
		['κορν', -1, 2],
		['αθρο', -1, 1],
		['συναθρο', 14, 1],
		['π', -1, 2],
		['ιμπ', 16, 2],
		['ρ', -1, 2],
		['μαρ', 18, 2],
		['αμπαρ', 18, 2],
		['γκρ', 18, 2],
		['βολβορ', 18, 2],
		['γλυκορ', 18, 2],
		['πιπερορ', 18, 2],
		['πρ', 18, 2],
		['μπρ', 25, 2],
		['αρρ', 18, 2],
		['γλυκυρ', 18, 2],
		['πολυρ', 18, 2],
		['λου', -1, 2],
	]

	/** @const */ var a_3 = [
		['ιζα', -1, 1],
		['ιζε', -1, 1],
		['ιζαμε', -1, 1],
		['ιζουμε', -1, 1],
		['ιζανε', -1, 1],
		['ιζουνε', -1, 1],
		['ιζατε', -1, 1],
		['ιζετε', -1, 1],
		['ιζει', -1, 1],
		['ιζαν', -1, 1],
		['ιζουν', -1, 1],
		['ιζεσ', -1, 1],
		['ιζεισ', -1, 1],
		['ιζω', -1, 1],
	]

	/** @const */ var a_4 = [
		['βι', -1, 1],
		['λι', -1, 1],
		['αλ', -1, 1],
		['εν', -1, 1],
		['σ', -1, 1],
		['χ', -1, 1],
		['υψ', -1, 1],
		['ζω', -1, 1],
	]

	/** @const */ var a_5 = [
		['ωθηκα', -1, 1],
		['ωθηκε', -1, 1],
		['ωθηκαμε', -1, 1],
		['ωθηκανε', -1, 1],
		['ωθηκατε', -1, 1],
		['ωθηκαν', -1, 1],
		['ωθηκεσ', -1, 1],
	]

	/** @const */ var a_6 = [
		['ξαναπα', -1, 1],
		['επα', -1, 1],
		['περιπα', -1, 1],
		['αναμπα', -1, 1],
		['εμπα', -1, 1],
		['χαρτοπα', -1, 1],
		['εξαρχα', -1, 1],
		['γε', -1, 2],
		['γκε', -1, 2],
		['κλε', -1, 1],
		['εκλε', 9, 1],
		['απεκλε', 10, 1],
		['αποκλε', 9, 1],
		['εσωκλε', 9, 1],
		['δανε', -1, 1],
		['πε', -1, 1],
		['επε', 15, 1],
		['μετεπε', 16, 1],
		['εσε', -1, 1],
		['γκ', -1, 2],
		['μ', -1, 2],
		['πουκαμ', 20, 2],
		['κομ', 20, 2],
		['αν', -1, 2],
		['ολο', -1, 2],
		['αθρο', -1, 1],
		['συναθρο', 25, 1],
		['π', -1, 2],
		['λαρ', -1, 2],
		['δημοκρατ', -1, 2],
		['αφ', -1, 2],
		['γιγαντοαφ', 30, 2],
	]

	/** @const */ var a_7 = [
		['ισα', -1, 1],
		['ισαμε', -1, 1],
		['ισανε', -1, 1],
		['ισε', -1, 1],
		['ισατε', -1, 1],
		['ισαν', -1, 1],
		['ισεσ', -1, 1],
	]

	/** @const */ var a_8 = [
		['ξαναπα', -1, 1],
		['επα', -1, 1],
		['περιπα', -1, 1],
		['αναμπα', -1, 1],
		['εμπα', -1, 1],
		['χαρτοπα', -1, 1],
		['εξαρχα', -1, 1],
		['κλε', -1, 1],
		['εκλε', 7, 1],
		['απεκλε', 8, 1],
		['αποκλε', 7, 1],
		['εσωκλε', 7, 1],
		['δανε', -1, 1],
		['πε', -1, 1],
		['επε', 13, 1],
		['μετεπε', 14, 1],
		['εσε', -1, 1],
		['αθρο', -1, 1],
		['συναθρο', 17, 1],
	]

	/** @const */ var a_9 = [
		['ισουμε', -1, 1],
		['ισουνε', -1, 1],
		['ισετε', -1, 1],
		['ισει', -1, 1],
		['ισουν', -1, 1],
		['ισεισ', -1, 1],
		['ισω', -1, 1],
	]

	/** @const */ var a_10 = [
		['ατα', -1, 2],
		['φα', -1, 2],
		['ηφα', 1, 2],
		['μεγ', -1, 2],
		['λυγ', -1, 2],
		['ηδ', -1, 2],
		['κλε', -1, 1],
		['εσωκλε', 6, 1],
		['πλε', -1, 1],
		['δανε', -1, 1],
		['σε', -1, 1],
		['ασε', 10, 1],
		['καθ', -1, 2],
		['εχθ', -1, 2],
		['κακ', -1, 2],
		['μακ', -1, 2],
		['σκ', -1, 2],
		['φιλ', -1, 2],
		['κυλ', -1, 2],
		['μ', -1, 2],
		['γεμ', 19, 2],
		['αχν', -1, 2],
		['συναθρο', -1, 1],
		['π', -1, 2],
		['απ', 23, 2],
		['εμπ', 23, 2],
		['ευπ', 23, 2],
		['αρ', -1, 2],
		['αορ', -1, 2],
		['γυρ', -1, 2],
		['χρ', -1, 2],
		['χωρ', -1, 2],
		['κτ', -1, 2],
		['ακτ', 32, 2],
		['χτ', -1, 2],
		['αχτ', 34, 2],
		['ταχ', -1, 2],
		['σχ', -1, 2],
		['ασχ', 37, 2],
		['υψ', -1, 2],
	]

	/** @const */ var a_11 = [
		['ιστα', -1, 1],
		['ιστε', -1, 1],
		['ιστη', -1, 1],
		['ιστοι', -1, 1],
		['ιστων', -1, 1],
		['ιστο', -1, 1],
		['ιστεσ', -1, 1],
		['ιστησ', -1, 1],
		['ιστοσ', -1, 1],
		['ιστουσ', -1, 1],
		['ιστου', -1, 1],
	]

	/** @const */ var a_12 = [
		['εγκλε', -1, 1],
		['αποκλε', -1, 1],
		['δανε', -1, 2],
		['αντιδανε', 2, 2],
		['σε', -1, 1],
		['μετασε', 4, 1],
		['μικροσε', 4, 1],
	]

	/** @const */ var a_13 = [
		['ατομικ', -1, 2],
		['εθνικ', -1, 4],
		['τοπικ', -1, 7],
		['εκλεκτικ', -1, 5],
		['σκεπτικ', -1, 6],
		['γνωστικ', -1, 3],
		['αγνωστικ', 5, 1],
		['αλεξανδριν', -1, 8],
		['θεατριν', -1, 10],
		['βυζαντιν', -1, 9],
	]

	/** @const */ var a_14 = [
		['ισμοι', -1, 1],
		['ισμων', -1, 1],
		['ισμο', -1, 1],
		['ισμοσ', -1, 1],
		['ισμουσ', -1, 1],
		['ισμου', -1, 1],
	]

	/** @const */ var a_15 = [
		['σ', -1, 1],
		['χ', -1, 1],
	]

	/** @const */ var a_16 = [
		['ουδακια', -1, 1],
		['αρακια', -1, 1],
		['ουδακι', -1, 1],
		['αρακι', -1, 1],
	]

	/** @const */ var a_17 = [
		['β', -1, 2],
		['βαμβ', 0, 1],
		['σλοβ', 0, 1],
		['τσεχοσλοβ', 2, 1],
		['καρδ', -1, 2],
		['ζ', -1, 2],
		['τζ', 5, 1],
		['κ', -1, 1],
		['καπακ', 7, 1],
		['σοκ', 7, 1],
		['σκ', 7, 1],
		['βαλ', -1, 2],
		['μαλ', -1, 1],
		['γλ', -1, 2],
		['τριπολ', -1, 2],
		['πλ', -1, 1],
		['λουλ', -1, 1],
		['φυλ', -1, 1],
		['καιμ', -1, 1],
		['κλιμ', -1, 1],
		['φαρμ', -1, 1],
		['γιαν', -1, 2],
		['σπαν', -1, 1],
		['ηγουμεν', -1, 2],
		['κον', -1, 1],
		['μακρυν', -1, 2],
		['π', -1, 2],
		['κατραπ', 26, 1],
		['ρ', -1, 1],
		['βρ', 28, 1],
		['λαβρ', 29, 1],
		['αμβρ', 29, 1],
		['μερ', 28, 1],
		['πατερ', 28, 2],
		['ανθρ', 28, 1],
		['κορ', 28, 1],
		['σ', -1, 1],
		['ναγκασ', 36, 1],
		['τοσ', 36, 2],
		['μουστ', -1, 1],
		['ρυ', -1, 1],
		['φ', -1, 1],
		['σφ', 41, 1],
		['αλισφ', 42, 1],
		['νυφ', 41, 2],
		['χ', -1, 1],
	]

	/** @const */ var a_18 = [
		['ακια', -1, 1],
		['αρακια', 0, 1],
		['ιτσα', -1, 1],
		['ακι', -1, 1],
		['αρακι', 3, 1],
		['ιτσων', -1, 1],
		['ιτσασ', -1, 1],
		['ιτσεσ', -1, 1],
	]

	/** @const */ var a_19 = [
		['ψαλ', -1, 1],
		['αιφν', -1, 1],
		['ολο', -1, 1],
		['ιρ', -1, 1],
	]

	/** @const */ var a_20 = [
		['ε', -1, 1],
		['παιχν', -1, 1],
	]

	/** @const */ var a_21 = [
		['ιδια', -1, 1],
		['ιδιων', -1, 1],
		['ιδιο', -1, 1],
	]

	/** @const */ var a_22 = [
		['ιβ', -1, 1],
		['δ', -1, 1],
		['φραγκ', -1, 1],
		['λυκ', -1, 1],
		['οβελ', -1, 1],
		['μην', -1, 1],
		['ρ', -1, 1],
	]

	/** @const */ var a_23 = [
		['ισκε', -1, 1],
		['ισκο', -1, 1],
		['ισκοσ', -1, 1],
		['ισκου', -1, 1],
	]

	/** @const */ var a_24 = [
		['αδων', -1, 1],
		['αδεσ', -1, 1],
	]

	/** @const */ var a_25 = [
		['γιαγι', -1, -1],
		['θει', -1, -1],
		['οκ', -1, -1],
		['μαμ', -1, -1],
		['μαν', -1, -1],
		['μπαμπ', -1, -1],
		['πεθερ', -1, -1],
		['πατερ', -1, -1],
		['κυρ', -1, -1],
		['νταντ', -1, -1],
	]

	/** @const */ var a_26 = [
		['εδων', -1, 1],
		['εδεσ', -1, 1],
	]

	/** @const */ var a_27 = [
		['μιλ', -1, 1],
		['δαπ', -1, 1],
		['γηπ', -1, 1],
		['ιπ', -1, 1],
		['εμπ', -1, 1],
		['οπ', -1, 1],
		['κρασπ', -1, 1],
		['υπ', -1, 1],
	]

	/** @const */ var a_28 = [
		['ουδων', -1, 1],
		['ουδεσ', -1, 1],
	]

	/** @const */ var a_29 = [
		['τραγ', -1, 1],
		['φε', -1, 1],
		['καλιακ', -1, 1],
		['αρκ', -1, 1],
		['σκ', -1, 1],
		['πεταλ', -1, 1],
		['βελ', -1, 1],
		['λουλ', -1, 1],
		['φλ', -1, 1],
		['χν', -1, 1],
		['πλεξ', -1, 1],
		['σπ', -1, 1],
		['φρ', -1, 1],
		['σ', -1, 1],
		['λιχ', -1, 1],
	]

	/** @const */ var a_30 = [
		['εων', -1, 1],
		['εωσ', -1, 1],
	]

	/** @const */ var a_31 = [
		['δ', -1, 1],
		['ιδ', 0, 1],
		['θ', -1, 1],
		['γαλ', -1, 1],
		['ελ', -1, 1],
		['ν', -1, 1],
		['π', -1, 1],
		['παρ', -1, 1],
	]

	/** @const */ var a_32 = [
		['ια', -1, 1],
		['ιων', -1, 1],
		['ιου', -1, 1],
	]

	/** @const */ var a_33 = [
		['ικα', -1, 1],
		['ικων', -1, 1],
		['ικο', -1, 1],
		['ικου', -1, 1],
	]

	/** @const */ var a_34 = [
		['αδ', -1, 1],
		['συναδ', 0, 1],
		['καταδ', 0, 1],
		['αντιδ', -1, 1],
		['ενδ', -1, 1],
		['φυλοδ', -1, 1],
		['υποδ', -1, 1],
		['πρωτοδ', -1, 1],
		['εξωδ', -1, 1],
		['ηθ', -1, 1],
		['ανηθ', 9, 1],
		['ξικ', -1, 1],
		['αλ', -1, 1],
		['αμμοχαλ', 12, 1],
		['συνομηλ', -1, 1],
		['μπολ', -1, 1],
		['μουλ', -1, 1],
		['τσαμ', -1, 1],
		['βρωμ', -1, 1],
		['αμαν', -1, 1],
		['μπαν', -1, 1],
		['καλλιν', -1, 1],
		['ποστελν', -1, 1],
		['φιλον', -1, 1],
		['καλπ', -1, 1],
		['γερ', -1, 1],
		['χασ', -1, 1],
		['μποσ', -1, 1],
		['πλιατσ', -1, 1],
		['πετσ', -1, 1],
		['πιτσ', -1, 1],
		['φυσ', -1, 1],
		['μπαγιατ', -1, 1],
		['νιτ', -1, 1],
		['πικαντ', -1, 1],
		['σερτ', -1, 1],
	]

	/** @const */ var a_35 = [
		['αγαμε', -1, 1],
		['ηκαμε', -1, 1],
		['ηθηκαμε', 1, 1],
		['ησαμε', -1, 1],
		['ουσαμε', -1, 1],
	]

	/** @const */ var a_36 = [
		['βουβ', -1, 1],
		['ξεθ', -1, 1],
		['πεθ', -1, 1],
		['αποθ', -1, 1],
		['αποκ', -1, 1],
		['ουλ', -1, 1],
		['αναπ', -1, 1],
		['πικρ', -1, 1],
		['ποτ', -1, 1],
		['αποστ', -1, 1],
		['χ', -1, 1],
		['σιχ', 10, 1],
	]

	/** @const */ var a_37 = [
		['τρ', -1, 1],
		['τσ', -1, 1],
	]

	/** @const */ var a_38 = [
		['αγανε', -1, 1],
		['ηκανε', -1, 1],
		['ηθηκανε', 1, 1],
		['ησανε', -1, 1],
		['ουσανε', -1, 1],
		['οντανε', -1, 1],
		['ιοντανε', 5, 1],
		['ουντανε', -1, 1],
		['ιουντανε', 7, 1],
		['οτανε', -1, 1],
		['ιοτανε', 9, 1],
	]

	/** @const */ var a_39 = [
		['ταβ', -1, 1],
		['νταβ', 0, 1],
		['ψηλοταβ', 0, 1],
		['λιβ', -1, 1],
		['κλιβ', 3, 1],
		['ξηροκλιβ', 4, 1],
		['γ', -1, 1],
		['αγ', 6, 1],
		['τραγ', 7, 1],
		['τσαγ', 7, 1],
		['αθιγγ', 6, 1],
		['τσιγγ', 6, 1],
		['ατσιγγ', 11, 1],
		['στεγ', 6, 1],
		['απηγ', 6, 1],
		['σιγ', 6, 1],
		['ανοργ', 6, 1],
		['ενοργ', 6, 1],
		['καλπουζ', -1, 1],
		['θ', -1, 1],
		['μωαμεθ', 19, 1],
		['πιθ', 19, 1],
		['απιθ', 21, 1],
		['δεκ', -1, 1],
		['πελεκ', -1, 1],
		['ικ', -1, 1],
		['ανικ', 25, 1],
		['βουλκ', -1, 1],
		['βασκ', -1, 1],
		['βραχυκ', -1, 1],
		['γαλ', -1, 1],
		['καταγαλ', 30, 1],
		['ολογαλ', 30, 1],
		['βαθυγαλ', 30, 1],
		['μελ', -1, 1],
		['καστελ', -1, 1],
		['πορτολ', -1, 1],
		['πλ', -1, 1],
		['διπλ', 37, 1],
		['λαοπλ', 37, 1],
		['ψυχοπλ', 37, 1],
		['ουλ', -1, 1],
		['μ', -1, 1],
		['ολιγοδαμ', 42, 1],
		['μουσουλμ', 42, 1],
		['δραδουμ', 42, 1],
		['βραχμ', 42, 1],
		['ν', -1, 1],
		['αμερικαν', 47, 1],
		['π', -1, 1],
		['αδαπ', 49, 1],
		['χαμηλοδαπ', 49, 1],
		['πολυδαπ', 49, 1],
		['κοπ', 49, 1],
		['υποκοπ', 53, 1],
		['τσοπ', 49, 1],
		['σπ', 49, 1],
		['ερ', -1, 1],
		['γερ', 57, 1],
		['βετερ', 57, 1],
		['λουθηρ', -1, 1],
		['κορμορ', -1, 1],
		['περιτρ', -1, 1],
		['ουρ', -1, 1],
		['σ', -1, 1],
		['βασ', 64, 1],
		['πολισ', 64, 1],
		['σαρακατσ', 64, 1],
		['θυσ', 64, 1],
		['διατ', -1, 1],
		['πλατ', -1, 1],
		['τσαρλατ', -1, 1],
		['τετ', -1, 1],
		['πουριτ', -1, 1],
		['σουλτ', -1, 1],
		['μαιντ', -1, 1],
		['ζωντ', -1, 1],
		['καστ', -1, 1],
		['φ', -1, 1],
		['διαφ', 78, 1],
		['στεφ', 78, 1],
		['φωτοστεφ', 80, 1],
		['περηφ', 78, 1],
		['υπερηφ', 82, 1],
		['κοιλαρφ', 78, 1],
		['πενταρφ', 78, 1],
		['ορφ', 78, 1],
		['χ', -1, 1],
		['αμηχ', 87, 1],
		['βιομηχ', 87, 1],
		['μεγλοβιομηχ', 89, 1],
		['καπνοβιομηχ', 89, 1],
		['μικροβιομηχ', 89, 1],
		['πολυμηχ', 87, 1],
		['λιχ', 87, 1],
	]

	/** @const */ var a_40 = [
		['ησετε', -1, 1],
	]

	/** @const */ var a_41 = [
		['ενδ', -1, 1],
		['συνδ', -1, 1],
		['οδ', -1, 1],
		['διαθ', -1, 1],
		['καθ', -1, 1],
		['ραθ', -1, 1],
		['ταθ', -1, 1],
		['τιθ', -1, 1],
		['εκθ', -1, 1],
		['ενθ', -1, 1],
		['συνθ', -1, 1],
		['ροθ', -1, 1],
		['υπερθ', -1, 1],
		['σθ', -1, 1],
		['ευθ', -1, 1],
		['αρκ', -1, 1],
		['ωφελ', -1, 1],
		['βολ', -1, 1],
		['αιν', -1, 1],
		['πον', -1, 1],
		['ρον', -1, 1],
		['συν', -1, 1],
		['βαρ', -1, 1],
		['βρ', -1, 1],
		['αιρ', -1, 1],
		['φορ', -1, 1],
		['ευρ', -1, 1],
		['πυρ', -1, 1],
		['χωρ', -1, 1],
		['νετ', -1, 1],
		['σχ', -1, 1],
	]

	/** @const */ var a_42 = [
		['παγ', -1, 1],
		['δ', -1, 1],
		['αδ', 1, 1],
		['θ', -1, 1],
		['αθ', 3, 1],
		['τοκ', -1, 1],
		['σκ', -1, 1],
		['παρακαλ', -1, 1],
		['σκελ', -1, 1],
		['απλ', -1, 1],
		['εμ', -1, 1],
		['αν', -1, 1],
		['βεν', -1, 1],
		['βαρον', -1, 1],
		['κοπ', -1, 1],
		['σερπ', -1, 1],
		['αβαρ', -1, 1],
		['εναρ', -1, 1],
		['αβρ', -1, 1],
		['μπορ', -1, 1],
		['θαρρ', -1, 1],
		['ντρ', -1, 1],
		['υ', -1, 1],
		['νιφ', -1, 1],
		['συρφ', -1, 1],
	]

	/** @const */ var a_43 = [
		['οντασ', -1, 1],
		['ωντασ', -1, 1],
	]

	/** @const */ var a_44 = [
		['ομαστε', -1, 1],
		['ιομαστε', 0, 1],
	]

	/** @const */ var a_45 = [
		['π', -1, 1],
		['απ', 0, 1],
		['ακαταπ', 1, 1],
		['συμπ', 0, 1],
		['ασυμπ', 3, 1],
		['αμεταμφ', -1, 1],
	]

	/** @const */ var a_46 = [
		['ζ', -1, 1],
		['αλ', -1, 1],
		['παρακαλ', 1, 1],
		['εκτελ', -1, 1],
		['μ', -1, 1],
		['ξ', -1, 1],
		['προ', -1, 1],
		['αρ', -1, 1],
		['νισ', -1, 1],
	]

	/** @const */ var a_47 = [
		['ηθηκα', -1, 1],
		['ηθηκε', -1, 1],
		['ηθηκεσ', -1, 1],
	]

	/** @const */ var a_48 = [
		['πιθ', -1, 1],
		['οθ', -1, 1],
		['ναρθ', -1, 1],
		['σκουλ', -1, 1],
		['σκωλ', -1, 1],
		['σφ', -1, 1],
	]

	/** @const */ var a_49 = [
		['θ', -1, 1],
		['διαθ', 0, 1],
		['παρακαταθ', 0, 1],
		['συνθ', 0, 1],
		['προσθ', 0, 1],
	]

	/** @const */ var a_50 = [
		['ηκα', -1, 1],
		['ηκε', -1, 1],
		['ηκεσ', -1, 1],
	]

	/** @const */ var a_51 = [
		['φαγ', -1, 1],
		['ληγ', -1, 1],
		['φρυδ', -1, 1],
		['μαντιλ', -1, 1],
		['μαλλ', -1, 1],
		['ομ', -1, 1],
		['βλεπ', -1, 1],
		['ποδαρ', -1, 1],
		['κυματ', -1, 1],
		['πρωτ', -1, 1],
		['λαχ', -1, 1],
		['πανταχ', -1, 1],
	]

	/** @const */ var a_52 = [
		['τσα', -1, 1],
		['χαδ', -1, 1],
		['μεδ', -1, 1],
		['λαμπιδ', -1, 1],
		['δε', -1, 1],
		['πλε', -1, 1],
		['μεσαζ', -1, 1],
		['δεσποζ', -1, 1],
		['αιθ', -1, 1],
		['φαρμακ', -1, 1],
		['αγκ', -1, 1],
		['ανηκ', -1, 1],
		['λ', -1, 1],
		['μ', -1, 1],
		['αμ', 13, 1],
		['βρομ', 13, 1],
		['υποτειν', -1, 1],
		['εκλιπ', -1, 1],
		['ρ', -1, 1],
		['ενδιαφερ', 18, 1],
		['αναρρ', 18, 1],
		['πατ', -1, 1],
		['καθαρευ', -1, 1],
		['δευτερευ', -1, 1],
		['λεχ', -1, 1],
	]

	/** @const */ var a_53 = [
		['ουσα', -1, 1],
		['ουσε', -1, 1],
		['ουσεσ', -1, 1],
	]

	/** @const */ var a_54 = [
		['πελ', -1, 1],
		['λλ', -1, 1],
		['σμην', -1, 1],
		['ρπ', -1, 1],
		['πρ', -1, 1],
		['φρ', -1, 1],
		['χορτ', -1, 1],
		['οφ', -1, 1],
		['ψοφ', 7, -1],
		['σφ', -1, 1],
		['λοχ', -1, 1],
		['ναυλοχ', 10, -1],
	]

	/** @const */ var a_55 = [
		['αμαλλι', -1, 1],
		['λ', -1, 1],
		['αμαλ', 1, 1],
		['μ', -1, 1],
		['ουλαμ', 3, 1],
		['εν', -1, 1],
		['δερβεν', 5, 1],
		['π', -1, 1],
		['αειπ', 7, 1],
		['αρτιπ', 7, 1],
		['συμπ', 7, 1],
		['νεοπ', 7, 1],
		['κροκαλοπ', 7, 1],
		['ολοπ', 7, 1],
		['προσωποπ', 7, 1],
		['σιδηροπ', 7, 1],
		['δροσοπ', 7, 1],
		['ασπ', 7, 1],
		['ανυπ', 7, 1],
		['ρ', -1, 1],
		['ασπαρ', 19, 1],
		['χαρ', 19, 1],
		['αχαρ', 21, 1],
		['απερ', 19, 1],
		['τρ', 19, 1],
		['ουρ', 19, 1],
		['τ', -1, 1],
		['διατ', 26, 1],
		['επιτ', 26, 1],
		['συντ', 26, 1],
		['ομοτ', 26, 1],
		['νομοτ', 30, 1],
		['αποτ', 26, 1],
		['υποτ', 26, 1],
		['αβαστ', 26, 1],
		['αιμοστ', 26, 1],
		['προστ', 26, 1],
		['ανυστ', 26, 1],
		['ναυ', -1, 1],
		['αφ', -1, 1],
		['ξεφ', -1, 1],
		['αδηφ', -1, 1],
		['παμφ', -1, 1],
		['πολυφ', -1, 1],
	]

	/** @const */ var a_56 = [
		['αγα', -1, 1],
		['αγε', -1, 1],
		['αγεσ', -1, 1],
	]

	/** @const */ var a_57 = [
		['ησα', -1, 1],
		['ησε', -1, 1],
		['ησου', -1, 1],
	]

	/** @const */ var a_58 = [
		['ν', -1, 1],
		['δωδεκαν', 0, 1],
		['επταν', 0, 1],
		['μεγαλον', 0, 1],
		['ερημον', 0, 1],
		['χερσον', 0, 1],
	]

	/** @const */ var a_59 = [
		['ηστε', -1, 1],
	]

	/** @const */ var a_60 = [
		['σβ', -1, 1],
		['ασβ', 0, 1],
		['απλ', -1, 1],
		['αειμν', -1, 1],
		['χρ', -1, 1],
		['αχρ', 4, 1],
		['κοινοχρ', 4, 1],
		['δυσχρ', 4, 1],
		['ευχρ', 4, 1],
		['παλιμψ', -1, 1],
	]

	/** @const */ var a_61 = [
		['ουνε', -1, 1],
		['ηθουνε', 0, 1],
		['ησουνε', 0, 1],
	]

	/** @const */ var a_62 = [
		['σπι', -1, 1],
		['ν', -1, 1],
		['εξων', 1, 1],
		['ρ', -1, 1],
		['στραβομουτσ', -1, 1],
		['κακομουτσ', -1, 1],
	]

	/** @const */ var a_63 = [
		['ουμε', -1, 1],
		['ηθουμε', 0, 1],
		['ησουμε', 0, 1],
	]

	/** @const */ var a_64 = [
		['αζ', -1, 1],
		['ωριοπλ', -1, 1],
		['ασουσ', -1, 1],
		['παρασουσ', 2, 1],
		['αλλοσουσ', -1, 1],
		['φ', -1, 1],
		['χ', -1, 1],
	]

	/** @const */ var a_65 = [
		['ματα', -1, 1],
		['ματων', -1, 1],
		['ματοσ', -1, 1],
	]

	/** @const */ var a_66 = [
		['α', -1, 1],
		['ιουμα', 0, 1],
		['ομουνα', 0, 1],
		['ιομουνα', 2, 1],
		['οσουνα', 0, 1],
		['ιοσουνα', 4, 1],
		['ε', -1, 1],
		['αγατε', 6, 1],
		['ηκατε', 6, 1],
		['ηθηκατε', 8, 1],
		['ησατε', 6, 1],
		['ουσατε', 6, 1],
		['ειτε', 6, 1],
		['ηθειτε', 12, 1],
		['ιεμαστε', 6, 1],
		['ουμαστε', 6, 1],
		['ιουμαστε', 15, 1],
		['ιεσαστε', 6, 1],
		['οσαστε', 6, 1],
		['ιοσαστε', 18, 1],
		['η', -1, 1],
		['ι', -1, 1],
		['αμαι', 21, 1],
		['ιεμαι', 21, 1],
		['ομαι', 21, 1],
		['ουμαι', 21, 1],
		['ασαι', 21, 1],
		['εσαι', 21, 1],
		['ιεσαι', 27, 1],
		['αται', 21, 1],
		['εται', 21, 1],
		['ιεται', 30, 1],
		['ονται', 21, 1],
		['ουνται', 21, 1],
		['ιουνται', 33, 1],
		['ει', 21, 1],
		['αει', 35, 1],
		['ηθει', 35, 1],
		['ησει', 35, 1],
		['οι', 21, 1],
		['αν', -1, 1],
		['αγαν', 40, 1],
		['ηκαν', 40, 1],
		['ηθηκαν', 42, 1],
		['ησαν', 40, 1],
		['ουσαν', 40, 1],
		['οντουσαν', 45, 1],
		['ιοντουσαν', 46, 1],
		['ονταν', 40, 1],
		['ιονταν', 48, 1],
		['ουνταν', 40, 1],
		['ιουνταν', 50, 1],
		['οταν', 40, 1],
		['ιοταν', 52, 1],
		['ομασταν', 40, 1],
		['ιομασταν', 54, 1],
		['οσασταν', 40, 1],
		['ιοσασταν', 56, 1],
		['ουν', -1, 1],
		['ηθουν', 58, 1],
		['ομουν', 58, 1],
		['ιομουν', 60, 1],
		['ησουν', 58, 1],
		['οσουν', 58, 1],
		['ιοσουν', 63, 1],
		['ων', -1, 1],
		['ηδων', 65, 1],
		['ο', -1, 1],
		['ασ', -1, 1],
		['εσ', -1, 1],
		['ηδεσ', 69, 1],
		['ησεσ', 69, 1],
		['ησ', -1, 1],
		['εισ', -1, 1],
		['ηθεισ', 73, 1],
		['οσ', -1, 1],
		['υσ', -1, 1],
		['ουσ', 76, 1],
		['υ', -1, 1],
		['ου', 78, 1],
		['ω', -1, 1],
		['αω', 80, 1],
		['ηθω', 80, 1],
		['ησω', 80, 1],
	]

	/** @const */ var a_67 = [
		['οτερ', -1, 1],
		['εστερ', -1, 1],
		['υτερ', -1, 1],
		['ωτερ', -1, 1],
		['οτατ', -1, 1],
		['εστατ', -1, 1],
		['υτατ', -1, 1],
		['ωτατ', -1, 1],
	]

	/** @const */ var /** Array<int> */ g_v = [81, 65, 16, 1]

	/** @const */ var /** Array<int> */ g_v2 = [81, 65, 0, 1]

	var /** boolean */ B_test1 = false

	/** @return {boolean} */
	function r_has_min_length() {
		return base.current.length >= 3
	}

	/** @return {boolean} */
	function r_tolower() {
		var /** number */ among_var
		while (true) {
			var /** number */ v_1 = base.limit - base.cursor
			lab0: {
				base.ket = base.cursor
				among_var = base.find_among_b(a_0)
				base.bra = base.cursor
				switch (among_var) {
					case 1:
						if (!base.slice_from('α')) {
							return false
						}
						break
					case 2:
						if (!base.slice_from('β')) {
							return false
						}
						break
					case 3:
						if (!base.slice_from('γ')) {
							return false
						}
						break
					case 4:
						if (!base.slice_from('δ')) {
							return false
						}
						break
					case 5:
						if (!base.slice_from('ε')) {
							return false
						}
						break
					case 6:
						if (!base.slice_from('ζ')) {
							return false
						}
						break
					case 7:
						if (!base.slice_from('η')) {
							return false
						}
						break
					case 8:
						if (!base.slice_from('θ')) {
							return false
						}
						break
					case 9:
						if (!base.slice_from('ι')) {
							return false
						}
						break
					case 10:
						if (!base.slice_from('κ')) {
							return false
						}
						break
					case 11:
						if (!base.slice_from('λ')) {
							return false
						}
						break
					case 12:
						if (!base.slice_from('μ')) {
							return false
						}
						break
					case 13:
						if (!base.slice_from('ν')) {
							return false
						}
						break
					case 14:
						if (!base.slice_from('ξ')) {
							return false
						}
						break
					case 15:
						if (!base.slice_from('ο')) {
							return false
						}
						break
					case 16:
						if (!base.slice_from('π')) {
							return false
						}
						break
					case 17:
						if (!base.slice_from('ρ')) {
							return false
						}
						break
					case 18:
						if (!base.slice_from('σ')) {
							return false
						}
						break
					case 19:
						if (!base.slice_from('τ')) {
							return false
						}
						break
					case 20:
						if (!base.slice_from('υ')) {
							return false
						}
						break
					case 21:
						if (!base.slice_from('φ')) {
							return false
						}
						break
					case 22:
						if (!base.slice_from('χ')) {
							return false
						}
						break
					case 23:
						if (!base.slice_from('ψ')) {
							return false
						}
						break
					case 24:
						if (!base.slice_from('ω')) {
							return false
						}
						break
					case 25:
						if (base.cursor <= base.limit_backward) {
							break lab0
						}
						base.cursor--
						break
				}
				continue
			}
			base.cursor = base.limit - v_1
			break
		}
		return true
	}

	/** @return {boolean} */
	function r_step1() {
		var /** number */ among_var
		base.ket = base.cursor
		among_var = base.find_among_b(a_1)
		if (among_var == 0) {
			return false
		}
		base.bra = base.cursor
		switch (among_var) {
			case 1:
				if (!base.slice_from('φα')) {
					return false
				}
				break
			case 2:
				if (!base.slice_from('σκα')) {
					return false
				}
				break
			case 3:
				if (!base.slice_from('ολο')) {
					return false
				}
				break
			case 4:
				if (!base.slice_from('σο')) {
					return false
				}
				break
			case 5:
				if (!base.slice_from('τατο')) {
					return false
				}
				break
			case 6:
				if (!base.slice_from('κρε')) {
					return false
				}
				break
			case 7:
				if (!base.slice_from('περ')) {
					return false
				}
				break
			case 8:
				if (!base.slice_from('τερ')) {
					return false
				}
				break
			case 9:
				if (!base.slice_from('φω')) {
					return false
				}
				break
			case 10:
				if (!base.slice_from('καθεστ')) {
					return false
				}
				break
			case 11:
				if (!base.slice_from('γεγον')) {
					return false
				}
				break
		}
		B_test1 = false
		return true
	}

	/** @return {boolean} */
	function r_steps1() {
		var /** number */ among_var
		base.ket = base.cursor
		if (base.find_among_b(a_3) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		B_test1 = false
		base.ket = base.cursor
		base.bra = base.cursor
		among_var = base.find_among_b(a_2)
		if (among_var == 0) {
			return false
		}
		if (base.cursor > base.limit_backward) {
			return false
		}
		switch (among_var) {
			case 1:
				if (!base.slice_from('ι')) {
					return false
				}
				break
			case 2:
				if (!base.slice_from('ιζ')) {
					return false
				}
				break
		}
		return true
	}

	/** @return {boolean} */
	function r_steps2() {
		base.ket = base.cursor
		if (base.find_among_b(a_5) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		B_test1 = false
		base.ket = base.cursor
		base.bra = base.cursor
		if (base.find_among_b(a_4) == 0) {
			return false
		}
		if (base.cursor > base.limit_backward) {
			return false
		}
		if (!base.slice_from('ων')) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_steps3() {
		var /** number */ among_var
		base.ket = base.cursor
		if (base.find_among_b(a_7) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		B_test1 = false
		lab0: {
			var /** number */ v_1 = base.limit - base.cursor
			lab1: {
				if (!(base.eq_s_b('ισα'))) {
					break lab1
				}
				if (base.cursor > base.limit_backward) {
					break lab1
				}
				if (!base.slice_from('ισ')) {
					return false
				}
				break lab0
			}
			base.cursor = base.limit - v_1
			base.ket = base.cursor
			base.bra = base.cursor
			among_var = base.find_among_b(a_6)
			if (among_var == 0) {
				return false
			}
			if (base.cursor > base.limit_backward) {
				return false
			}
			switch (among_var) {
				case 1:
					if (!base.slice_from('ι')) {
						return false
					}
					break
				case 2:
					if (!base.slice_from('ισ')) {
						return false
					}
					break
			}
		}
		return true
	}

	/** @return {boolean} */
	function r_steps4() {
		base.ket = base.cursor
		if (base.find_among_b(a_9) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		B_test1 = false
		base.ket = base.cursor
		base.bra = base.cursor
		if (base.find_among_b(a_8) == 0) {
			return false
		}
		if (base.cursor > base.limit_backward) {
			return false
		}
		if (!base.slice_from('ι')) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_steps5() {
		var /** number */ among_var
		base.ket = base.cursor
		if (base.find_among_b(a_11) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		B_test1 = false
		base.ket = base.cursor
		base.bra = base.cursor
		among_var = base.find_among_b(a_10)
		if (among_var == 0) {
			return false
		}
		if (base.cursor > base.limit_backward) {
			return false
		}
		switch (among_var) {
			case 1:
				if (!base.slice_from('ι')) {
					return false
				}
				break
			case 2:
				if (!base.slice_from('ιστ')) {
					return false
				}
				break
		}
		return true
	}

	/** @return {boolean} */
	function r_steps6() {
		var /** number */ among_var
		base.ket = base.cursor
		if (base.find_among_b(a_14) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		B_test1 = false
		lab0: {
			var /** number */ v_1 = base.limit - base.cursor
			lab1: {
				base.ket = base.cursor
				base.bra = base.cursor
				among_var = base.find_among_b(a_12)
				if (among_var == 0) {
					break lab1
				}
				if (base.cursor > base.limit_backward) {
					break lab1
				}
				switch (among_var) {
					case 1:
						if (!base.slice_from('ισμ')) {
							return false
						}
						break
					case 2:
						if (!base.slice_from('ι')) {
							return false
						}
						break
				}
				break lab0
			}
			base.cursor = base.limit - v_1
			base.ket = base.cursor
			among_var = base.find_among_b(a_13)
			if (among_var == 0) {
				return false
			}
			base.bra = base.cursor
			switch (among_var) {
				case 1:
					if (!base.slice_from('αγνωστ')) {
						return false
					}
					break
				case 2:
					if (!base.slice_from('ατομ')) {
						return false
					}
					break
				case 3:
					if (!base.slice_from('γνωστ')) {
						return false
					}
					break
				case 4:
					if (!base.slice_from('εθν')) {
						return false
					}
					break
				case 5:
					if (!base.slice_from('εκλεκτ')) {
						return false
					}
					break
				case 6:
					if (!base.slice_from('σκεπτ')) {
						return false
					}
					break
				case 7:
					if (!base.slice_from('τοπ')) {
						return false
					}
					break
				case 8:
					if (!base.slice_from('αλεξανδρ')) {
						return false
					}
					break
				case 9:
					if (!base.slice_from('βυζαντ')) {
						return false
					}
					break
				case 10:
					if (!base.slice_from('θεατρ')) {
						return false
					}
					break
			}
		}
		return true
	}

	/** @return {boolean} */
	function r_steps7() {
		base.ket = base.cursor
		if (base.find_among_b(a_16) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		B_test1 = false
		base.ket = base.cursor
		base.bra = base.cursor
		if (base.find_among_b(a_15) == 0) {
			return false
		}
		if (base.cursor > base.limit_backward) {
			return false
		}
		if (!base.slice_from('αρακ')) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_steps8() {
		var /** number */ among_var
		base.ket = base.cursor
		if (base.find_among_b(a_18) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		B_test1 = false
		lab0: {
			var /** number */ v_1 = base.limit - base.cursor
			lab1: {
				base.ket = base.cursor
				base.bra = base.cursor
				among_var = base.find_among_b(a_17)
				if (among_var == 0) {
					break lab1
				}
				if (base.cursor > base.limit_backward) {
					break lab1
				}
				switch (among_var) {
					case 1:
						if (!base.slice_from('ακ')) {
							return false
						}
						break
					case 2:
						if (!base.slice_from('ιτσ')) {
							return false
						}
						break
				}
				break lab0
			}
			base.cursor = base.limit - v_1
			base.ket = base.cursor
			base.bra = base.cursor
			if (!(base.eq_s_b('κορ'))) {
				return false
			}
			if (!base.slice_from('ιτσ')) {
				return false
			}
		}
		return true
	}

	/** @return {boolean} */
	function r_steps9() {
		base.ket = base.cursor
		if (base.find_among_b(a_21) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		B_test1 = false
		lab0: {
			var /** number */ v_1 = base.limit - base.cursor
			lab1: {
				base.ket = base.cursor
				base.bra = base.cursor
				if (base.find_among_b(a_19) == 0) {
					break lab1
				}
				if (base.cursor > base.limit_backward) {
					break lab1
				}
				if (!base.slice_from('ιδ')) {
					return false
				}
				break lab0
			}
			base.cursor = base.limit - v_1
			base.ket = base.cursor
			base.bra = base.cursor
			if (base.find_among_b(a_20) == 0) {
				return false
			}
			if (!base.slice_from('ιδ')) {
				return false
			}
		}
		return true
	}

	/** @return {boolean} */
	function r_steps10() {
		base.ket = base.cursor
		if (base.find_among_b(a_23) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		B_test1 = false
		base.ket = base.cursor
		base.bra = base.cursor
		if (base.find_among_b(a_22) == 0) {
			return false
		}
		if (base.cursor > base.limit_backward) {
			return false
		}
		if (!base.slice_from('ισκ')) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_step2a() {
		base.ket = base.cursor
		if (base.find_among_b(a_24) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		{
			var /** number */ v_1 = base.limit - base.cursor
			lab0: {
				if (base.find_among_b(a_25) == 0) {
					break lab0
				}
				return false
			}
			base.cursor = base.limit - v_1
		}
		{
			var /** number */ c1 = base.cursor
			base.insert(base.cursor, base.cursor, 'αδ')
			base.cursor = c1
		}
		return true
	}

	/** @return {boolean} */
	function r_step2b() {
		base.ket = base.cursor
		if (base.find_among_b(a_26) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		base.ket = base.cursor
		base.bra = base.cursor
		if (base.find_among_b(a_27) == 0) {
			return false
		}
		if (!base.slice_from('εδ')) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_step2c() {
		base.ket = base.cursor
		if (base.find_among_b(a_28) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		base.ket = base.cursor
		base.bra = base.cursor
		if (base.find_among_b(a_29) == 0) {
			return false
		}
		if (!base.slice_from('ουδ')) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_step2d() {
		base.ket = base.cursor
		if (base.find_among_b(a_30) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		B_test1 = false
		base.ket = base.cursor
		base.bra = base.cursor
		if (base.find_among_b(a_31) == 0) {
			return false
		}
		if (base.cursor > base.limit_backward) {
			return false
		}
		if (!base.slice_from('ε')) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_step3() {
		base.ket = base.cursor
		if (base.find_among_b(a_32) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		B_test1 = false
		base.ket = base.cursor
		base.bra = base.cursor
		if (!(base.in_grouping_b(g_v, 945, 969))) {
			return false
		}
		if (!base.slice_from('ι')) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_step4() {
		base.ket = base.cursor
		if (base.find_among_b(a_33) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		B_test1 = false
		lab0: {
			var /** number */ v_1 = base.limit - base.cursor
			lab1: {
				base.ket = base.cursor
				base.bra = base.cursor
				if (!(base.in_grouping_b(g_v, 945, 969))) {
					break lab1
				}
				if (!base.slice_from('ικ')) {
					return false
				}
				break lab0
			}
			base.cursor = base.limit - v_1
			base.ket = base.cursor
		}
		base.bra = base.cursor
		if (base.find_among_b(a_34) == 0) {
			return false
		}
		if (base.cursor > base.limit_backward) {
			return false
		}
		if (!base.slice_from('ικ')) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_step5a() {
		var /** number */ v_1 = base.limit - base.cursor
		lab0: {
			if (!(base.eq_s_b('αγαμε'))) {
				break lab0
			}
			if (base.cursor > base.limit_backward) {
				break lab0
			}
			if (!base.slice_from('αγαμ')) {
				return false
			}
		}
		base.cursor = base.limit - v_1
		var /** number */ v_2 = base.limit - base.cursor
		lab1: {
			base.ket = base.cursor
			if (base.find_among_b(a_35) == 0) {
				break lab1
			}
			base.bra = base.cursor
			if (!base.slice_del()) {
				return false
			}
			B_test1 = false
		}
		base.cursor = base.limit - v_2
		base.ket = base.cursor
		if (!(base.eq_s_b('αμε'))) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		B_test1 = false
		base.ket = base.cursor
		base.bra = base.cursor
		if (base.find_among_b(a_36) == 0) {
			return false
		}
		if (base.cursor > base.limit_backward) {
			return false
		}
		if (!base.slice_from('αμ')) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_step5b() {
		var /** number */ v_1 = base.limit - base.cursor
		lab0: {
			base.ket = base.cursor
			if (base.find_among_b(a_38) == 0) {
				break lab0
			}
			base.bra = base.cursor
			if (!base.slice_del()) {
				return false
			}
			B_test1 = false
			base.ket = base.cursor
			base.bra = base.cursor
			if (base.find_among_b(a_37) == 0) {
				break lab0
			}
			if (base.cursor > base.limit_backward) {
				break lab0
			}
			if (!base.slice_from('αγαν')) {
				return false
			}
		}
		base.cursor = base.limit - v_1
		base.ket = base.cursor
		if (!(base.eq_s_b('ανε'))) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		B_test1 = false
		lab1: {
			var /** number */ v_2 = base.limit - base.cursor
			lab2: {
				base.ket = base.cursor
				base.bra = base.cursor
				if (!(base.in_grouping_b(g_v2, 945, 969))) {
					break lab2
				}
				if (!base.slice_from('αν')) {
					return false
				}
				break lab1
			}
			base.cursor = base.limit - v_2
			base.ket = base.cursor
		}
		base.bra = base.cursor
		if (base.find_among_b(a_39) == 0) {
			return false
		}
		if (base.cursor > base.limit_backward) {
			return false
		}
		if (!base.slice_from('αν')) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_step5c() {
		var /** number */ v_1 = base.limit - base.cursor
		lab0: {
			base.ket = base.cursor
			if (base.find_among_b(a_40) == 0) {
				break lab0
			}
			base.bra = base.cursor
			if (!base.slice_del()) {
				return false
			}
			B_test1 = false
		}
		base.cursor = base.limit - v_1
		base.ket = base.cursor
		if (!(base.eq_s_b('ετε'))) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		B_test1 = false
		lab1: {
			var /** number */ v_2 = base.limit - base.cursor
			lab2: {
				base.ket = base.cursor
				base.bra = base.cursor
				if (!(base.in_grouping_b(g_v2, 945, 969))) {
					break lab2
				}
				if (!base.slice_from('ετ')) {
					return false
				}
				break lab1
			}
			base.cursor = base.limit - v_2
			lab3: {
				base.ket = base.cursor
				base.bra = base.cursor
				if (base.find_among_b(a_41) == 0) {
					break lab3
				}
				if (!base.slice_from('ετ')) {
					return false
				}
				break lab1
			}
			base.cursor = base.limit - v_2
			base.ket = base.cursor
		}
		base.bra = base.cursor
		if (base.find_among_b(a_42) == 0) {
			return false
		}
		if (base.cursor > base.limit_backward) {
			return false
		}
		if (!base.slice_from('ετ')) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_step5d() {
		base.ket = base.cursor
		if (base.find_among_b(a_43) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		B_test1 = false
		lab0: {
			var /** number */ v_1 = base.limit - base.cursor
			lab1: {
				base.ket = base.cursor
				base.bra = base.cursor
				if (!(base.eq_s_b('αρχ'))) {
					break lab1
				}
				if (base.cursor > base.limit_backward) {
					break lab1
				}
				if (!base.slice_from('οντ')) {
					return false
				}
				break lab0
			}
			base.cursor = base.limit - v_1
			base.ket = base.cursor
			base.bra = base.cursor
			if (!(base.eq_s_b('κρε'))) {
				return false
			}
			if (!base.slice_from('ωντ')) {
				return false
			}
		}
		return true
	}

	/** @return {boolean} */
	function r_step5e() {
		base.ket = base.cursor
		if (base.find_among_b(a_44) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		B_test1 = false
		base.ket = base.cursor
		base.bra = base.cursor
		if (!(base.eq_s_b('ον'))) {
			return false
		}
		if (base.cursor > base.limit_backward) {
			return false
		}
		if (!base.slice_from('ομαστ')) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_step5f() {
		var /** number */ v_1 = base.limit - base.cursor
		lab0: {
			base.ket = base.cursor
			if (!(base.eq_s_b('ιεστε'))) {
				break lab0
			}
			base.bra = base.cursor
			if (!base.slice_del()) {
				return false
			}
			B_test1 = false
			base.ket = base.cursor
			base.bra = base.cursor
			if (base.find_among_b(a_45) == 0) {
				break lab0
			}
			if (base.cursor > base.limit_backward) {
				break lab0
			}
			if (!base.slice_from('ιεστ')) {
				return false
			}
		}
		base.cursor = base.limit - v_1
		base.ket = base.cursor
		if (!(base.eq_s_b('εστε'))) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		B_test1 = false
		base.ket = base.cursor
		base.bra = base.cursor
		if (base.find_among_b(a_46) == 0) {
			return false
		}
		if (base.cursor > base.limit_backward) {
			return false
		}
		if (!base.slice_from('ιεστ')) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_step5g() {
		var /** number */ v_1 = base.limit - base.cursor
		lab0: {
			base.ket = base.cursor
			if (base.find_among_b(a_47) == 0) {
				break lab0
			}
			base.bra = base.cursor
			if (!base.slice_del()) {
				return false
			}
			B_test1 = false
		}
		base.cursor = base.limit - v_1
		base.ket = base.cursor
		if (base.find_among_b(a_50) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		B_test1 = false
		lab1: {
			var /** number */ v_2 = base.limit - base.cursor
			lab2: {
				base.ket = base.cursor
				base.bra = base.cursor
				if (base.find_among_b(a_48) == 0) {
					break lab2
				}
				if (!base.slice_from('ηκ')) {
					return false
				}
				break lab1
			}
			base.cursor = base.limit - v_2
			base.ket = base.cursor
			base.bra = base.cursor
			if (base.find_among_b(a_49) == 0) {
				return false
			}
			if (base.cursor > base.limit_backward) {
				return false
			}
			if (!base.slice_from('ηκ')) {
				return false
			}
		}
		return true
	}

	/** @return {boolean} */
	function r_step5h() {
		base.ket = base.cursor
		if (base.find_among_b(a_53) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		B_test1 = false
		lab0: {
			var /** number */ v_1 = base.limit - base.cursor
			lab1: {
				base.ket = base.cursor
				base.bra = base.cursor
				if (base.find_among_b(a_51) == 0) {
					break lab1
				}
				if (!base.slice_from('ουσ')) {
					return false
				}
				break lab0
			}
			base.cursor = base.limit - v_1
			base.ket = base.cursor
			base.bra = base.cursor
			if (base.find_among_b(a_52) == 0) {
				return false
			}
			if (base.cursor > base.limit_backward) {
				return false
			}
			if (!base.slice_from('ουσ')) {
				return false
			}
		}
		return true
	}

	/** @return {boolean} */
	function r_step5i() {
		var /** number */ among_var
		base.ket = base.cursor
		if (base.find_among_b(a_56) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		B_test1 = false
		lab0: {
			var /** number */ v_1 = base.limit - base.cursor
			lab1: {
				base.ket = base.cursor
				base.bra = base.cursor
				if (!(base.eq_s_b('κολλ'))) {
					break lab1
				}
				if (!base.slice_from('αγ')) {
					return false
				}
				break lab0
			}
			base.cursor = base.limit - v_1
			lab2: {
				var /** number */ v_2 = base.limit - base.cursor
				lab3: {
					base.ket = base.cursor
					base.bra = base.cursor
					among_var = base.find_among_b(a_54)
					if (among_var == 0) {
						break lab3
					}
					switch (among_var) {
						case 1:
							if (!base.slice_from('αγ')) {
								return false
							}
							break
					}
					break lab2
				}
				base.cursor = base.limit - v_2
				base.ket = base.cursor
				base.bra = base.cursor
				if (base.find_among_b(a_55) == 0) {
					return false
				}
				if (base.cursor > base.limit_backward) {
					return false
				}
				if (!base.slice_from('αγ')) {
					return false
				}
			}
		}
		return true
	}

	/** @return {boolean} */
	function r_step5j() {
		base.ket = base.cursor
		if (base.find_among_b(a_57) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		B_test1 = false
		base.ket = base.cursor
		base.bra = base.cursor
		if (base.find_among_b(a_58) == 0) {
			return false
		}
		if (base.cursor > base.limit_backward) {
			return false
		}
		if (!base.slice_from('ησ')) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_step5k() {
		base.ket = base.cursor
		if (base.find_among_b(a_59) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		B_test1 = false
		base.ket = base.cursor
		base.bra = base.cursor
		if (base.find_among_b(a_60) == 0) {
			return false
		}
		if (base.cursor > base.limit_backward) {
			return false
		}
		if (!base.slice_from('ηστ')) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_step5l() {
		base.ket = base.cursor
		if (base.find_among_b(a_61) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		B_test1 = false
		base.ket = base.cursor
		base.bra = base.cursor
		if (base.find_among_b(a_62) == 0) {
			return false
		}
		if (base.cursor > base.limit_backward) {
			return false
		}
		if (!base.slice_from('ουν')) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_step5m() {
		base.ket = base.cursor
		if (base.find_among_b(a_63) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		B_test1 = false
		base.ket = base.cursor
		base.bra = base.cursor
		if (base.find_among_b(a_64) == 0) {
			return false
		}
		if (base.cursor > base.limit_backward) {
			return false
		}
		if (!base.slice_from('ουμ')) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_step6() {
		var /** number */ v_1 = base.limit - base.cursor
		lab0: {
			base.ket = base.cursor
			if (base.find_among_b(a_65) == 0) {
				break lab0
			}
			base.bra = base.cursor
			if (!base.slice_from('μα')) {
				return false
			}
		}
		base.cursor = base.limit - v_1
		if (!B_test1) {
			return false
		}
		base.ket = base.cursor
		if (base.find_among_b(a_66) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_step7() {
		base.ket = base.cursor
		if (base.find_among_b(a_67) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		return true
	}

	this.stem = /** @return {boolean} */ function () {
		base.limit_backward = base.cursor
		base.cursor = base.limit
		var /** number */ v_1 = base.limit - base.cursor
		r_tolower()
		base.cursor = base.limit - v_1
		if (!r_has_min_length()) {
			return false
		}
		B_test1 = true
		var /** number */ v_2 = base.limit - base.cursor
		r_step1()
		base.cursor = base.limit - v_2
		var /** number */ v_3 = base.limit - base.cursor
		r_steps1()
		base.cursor = base.limit - v_3
		var /** number */ v_4 = base.limit - base.cursor
		r_steps2()
		base.cursor = base.limit - v_4
		var /** number */ v_5 = base.limit - base.cursor
		r_steps3()
		base.cursor = base.limit - v_5
		var /** number */ v_6 = base.limit - base.cursor
		r_steps4()
		base.cursor = base.limit - v_6
		var /** number */ v_7 = base.limit - base.cursor
		r_steps5()
		base.cursor = base.limit - v_7
		var /** number */ v_8 = base.limit - base.cursor
		r_steps6()
		base.cursor = base.limit - v_8
		var /** number */ v_9 = base.limit - base.cursor
		r_steps7()
		base.cursor = base.limit - v_9
		var /** number */ v_10 = base.limit - base.cursor
		r_steps8()
		base.cursor = base.limit - v_10
		var /** number */ v_11 = base.limit - base.cursor
		r_steps9()
		base.cursor = base.limit - v_11
		var /** number */ v_12 = base.limit - base.cursor
		r_steps10()
		base.cursor = base.limit - v_12
		var /** number */ v_13 = base.limit - base.cursor
		r_step2a()
		base.cursor = base.limit - v_13
		var /** number */ v_14 = base.limit - base.cursor
		r_step2b()
		base.cursor = base.limit - v_14
		var /** number */ v_15 = base.limit - base.cursor
		r_step2c()
		base.cursor = base.limit - v_15
		var /** number */ v_16 = base.limit - base.cursor
		r_step2d()
		base.cursor = base.limit - v_16
		var /** number */ v_17 = base.limit - base.cursor
		r_step3()
		base.cursor = base.limit - v_17
		var /** number */ v_18 = base.limit - base.cursor
		r_step4()
		base.cursor = base.limit - v_18
		var /** number */ v_19 = base.limit - base.cursor
		r_step5a()
		base.cursor = base.limit - v_19
		var /** number */ v_20 = base.limit - base.cursor
		r_step5b()
		base.cursor = base.limit - v_20
		var /** number */ v_21 = base.limit - base.cursor
		r_step5c()
		base.cursor = base.limit - v_21
		var /** number */ v_22 = base.limit - base.cursor
		r_step5d()
		base.cursor = base.limit - v_22
		var /** number */ v_23 = base.limit - base.cursor
		r_step5e()
		base.cursor = base.limit - v_23
		var /** number */ v_24 = base.limit - base.cursor
		r_step5f()
		base.cursor = base.limit - v_24
		var /** number */ v_25 = base.limit - base.cursor
		r_step5g()
		base.cursor = base.limit - v_25
		var /** number */ v_26 = base.limit - base.cursor
		r_step5h()
		base.cursor = base.limit - v_26
		var /** number */ v_27 = base.limit - base.cursor
		r_step5j()
		base.cursor = base.limit - v_27
		var /** number */ v_28 = base.limit - base.cursor
		r_step5i()
		base.cursor = base.limit - v_28
		var /** number */ v_29 = base.limit - base.cursor
		r_step5k()
		base.cursor = base.limit - v_29
		var /** number */ v_30 = base.limit - base.cursor
		r_step5l()
		base.cursor = base.limit - v_30
		var /** number */ v_31 = base.limit - base.cursor
		r_step5m()
		base.cursor = base.limit - v_31
		var /** number */ v_32 = base.limit - base.cursor
		r_step6()
		base.cursor = base.limit - v_32
		var /** number */ v_33 = base.limit - base.cursor
		r_step7()
		base.cursor = base.limit - v_33
		base.cursor = base.limit_backward
		return true
	}

	/**@return{string}*/
	this['stemWord'] = function (/**string*/ word) {
		base.setCurrent(word)
		this.stem()
		return base.getCurrent()
	}
}

export default GreekStemmer
