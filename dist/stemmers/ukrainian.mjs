// Generated by Snowball 2.2.0 - https://snowballstem.org/
// deno-lint-ignore-file
import BaseStemmer from '../core/base-stemmer.mjs'

/** @typedef {{ stemWord(word: string): string }} Stemmer */

/** @type {{ new(): Stemmer }} */
const UkrainianStemmer = function () {
	var base = new BaseStemmer()
	/** @const */ var a_0 = [
		['в', -1, 1],
		['ачи', -1, 1],
		['учи', -1, 1],
		['ючи', -1, 1],
		['ячи', -1, 1],
		['лячи', 4, 1],
		['вши', -1, 1],
		['ачись', -1, 1],
		['ючись', -1, 1],
		['ячись', -1, 1],
		['лячись', 9, 1],
		['вшись', -1, 1],
		['ачися', -1, 1],
		['ючися', -1, 1],
		['ячися', -1, 1],
		['лячися', 14, 1],
		['вшися', -1, 1],
	]

	/** @const */ var a_1 = [
		['ача', -1, 1],
		['уча', -1, 1],
		['юча', -1, 1],
		['яча', -1, 1],
		['іша', -1, 1],
		['аче', -1, 1],
		['уче', -1, 1],
		['юче', -1, 1],
		['яче', -1, 1],
		['іше', -1, 1],
		['ими', -1, 1],
		['ішими', 10, 1],
		['іми', -1, 1],
		['ий', -1, 1],
		['іший', 13, 1],
		['ій', -1, 1],
		['ішій', 15, 1],
		['им', -1, 1],
		['ішим', 17, 1],
		['ім', -1, 1],
		['ішім', 19, 1],
		['ого', -1, 1],
		['ішого', 21, 1],
		['ього', 21, 1],
		['ому', -1, 1],
		['ішому', 24, 1],
		['ьому', 24, 1],
		['ачу', -1, 1],
		['учу', -1, 1],
		['ючу', -1, 1],
		['ячу', -1, 1],
		['ішу', -1, 1],
		['их', -1, 1],
		['іших', 32, 1],
		['іх', -1, 1],
		['ою', -1, 1],
		['ішою', 35, 1],
		['ьою', 35, 1],
		['ачі', -1, 1],
		['учі', -1, 1],
		['ючі', -1, 1],
		['ячі', -1, 1],
		['іші', -1, 1],
		['ої', -1, 1],
		['ішої', 43, 1],
		['ьої', 43, 1],
	]

	/** @const */ var a_2 = [
		['ач', -1, 1],
		['уч', -1, 1],
		['юч', -1, 1],
		['яч', -1, 1],
	]

	/** @const */ var a_3 = [
		['сь', -1, 1],
		['ся', -1, 1],
		['еться', 1, 1],
		['ється', 1, 1],
	]

	/** @const */ var a_4 = [
		['ла', -1, 1],
		['те', -1, 1],
		['ете', 1, 1],
		['ите', 1, 1],
		['йте', 1, 1],
		['єте', 1, 1],
		['їте', 1, 1],
		['ли', -1, 1],
		['ти', -1, 1],
		['ло', -1, 1],
		['емо', -1, 1],
		['имо', -1, 1],
		['ємо', -1, 1],
		['їмо', -1, 1],
		['еш', -1, 1],
		['иш', -1, 1],
		['єш', -1, 1],
		['їш', -1, 1],
		['ать', -1, 1],
		['ить', -1, 1],
		['уть', -1, 1],
		['ють', -1, 1],
		['ять', -1, 1],
		['лять', 22, 1],
		['іть', -1, 1],
		['їть', -1, 1],
		['лю', -1, 1],
	]

	/** @const */ var a_5 = [
		['ами', -1, 1],
		['ями', -1, 1],
		['ой', -1, 1],
		['ам', -1, 1],
		['ем', -1, 1],
		['ом', -1, 1],
		['ям', -1, 1],
		['ах', -1, 1],
		['ях', -1, 1],
		['ень', -1, 1],
		['ець', -1, 1],
		['ею', -1, 1],
		['ію', -1, 1],
		['ові', -1, 1],
		['ії', -1, 1],
	]

	/** @const */ var a_6 = [
		['а', -1, 1],
		['в', -1, 1],
		['е', -1, 1],
		['и', -1, 1],
		['й', -1, 1],
		['ій', 4, 1],
		['о', -1, 1],
		['у', -1, 1],
		['ь', -1, 1],
		['ю', -1, 1],
		['ою', 9, 1],
		['я', -1, 1],
		['є', -1, 1],
		['і', -1, 1],
	]

	/** @const */ var a_7 = [
		['ост', -1, 1],
		['іст', -1, 1],
	]

	/** @const */ var /** Array<int> */ g_v = [33, 65, 8, 192, 208]

	var /** number */ I_p2 = 0
	var /** number */ I_p1 = 0
	var /** number */ I_pV = 0

	/** @return {boolean} */
	function r_prelude() {
		var /** number */ v_1 = base.cursor
		lab0: {
			while (true) {
				var /** number */ v_2 = base.cursor
				lab1: {
					golab2: while (true) {
						var /** number */ v_3 = base.cursor
						lab3: {
							base.bra = base.cursor
							if (!(base.eq_s('ґ'))) {
								break lab3
							}
							base.ket = base.cursor
							base.cursor = v_3
							break golab2
						}
						base.cursor = v_3
						if (base.cursor >= base.limit) {
							break lab1
						}
						base.cursor++
					}
					if (!base.slice_from('г')) {
						return false
					}
					continue
				}
				base.cursor = v_2
				break
			}
		}
		base.cursor = v_1
		var /** number */ v_4 = base.cursor
		lab4: {
			while (true) {
				var /** number */ v_5 = base.cursor
				lab5: {
					golab6: while (true) {
						var /** number */ v_6 = base.cursor
						lab7: {
							base.bra = base.cursor
							if (!(base.eq_s('\''))) {
								break lab7
							}
							base.ket = base.cursor
							base.cursor = v_6
							break golab6
						}
						base.cursor = v_6
						if (base.cursor >= base.limit) {
							break lab5
						}
						base.cursor++
					}
					if (!base.slice_del()) {
						return false
					}
					continue
				}
				base.cursor = v_5
				break
			}
		}
		base.cursor = v_4
		var /** number */ v_7 = base.cursor
		lab8: {
			while (true) {
				var /** number */ v_8 = base.cursor
				lab9: {
					golab10: while (true) {
						var /** number */ v_9 = base.cursor
						lab11: {
							base.bra = base.cursor
							if (!(base.eq_s('ʹ'))) {
								break lab11
							}
							base.ket = base.cursor
							base.cursor = v_9
							break golab10
						}
						base.cursor = v_9
						if (base.cursor >= base.limit) {
							break lab9
						}
						base.cursor++
					}
					if (!base.slice_del()) {
						return false
					}
					continue
				}
				base.cursor = v_8
				break
			}
		}
		base.cursor = v_7
		var /** number */ v_10 = base.cursor
		lab12: {
			while (true) {
				var /** number */ v_11 = base.cursor
				lab13: {
					golab14: while (true) {
						var /** number */ v_12 = base.cursor
						lab15: {
							base.bra = base.cursor
							if (!(base.eq_s('ʻ'))) {
								break lab15
							}
							base.ket = base.cursor
							base.cursor = v_12
							break golab14
						}
						base.cursor = v_12
						if (base.cursor >= base.limit) {
							break lab13
						}
						base.cursor++
					}
					if (!base.slice_del()) {
						return false
					}
					continue
				}
				base.cursor = v_11
				break
			}
		}
		base.cursor = v_10
		var /** number */ v_13 = base.cursor
		lab16: {
			while (true) {
				var /** number */ v_14 = base.cursor
				lab17: {
					golab18: while (true) {
						var /** number */ v_15 = base.cursor
						lab19: {
							base.bra = base.cursor
							if (!(base.eq_s('ʼ'))) {
								break lab19
							}
							base.ket = base.cursor
							base.cursor = v_15
							break golab18
						}
						base.cursor = v_15
						if (base.cursor >= base.limit) {
							break lab17
						}
						base.cursor++
					}
					if (!base.slice_del()) {
						return false
					}
					continue
				}
				base.cursor = v_14
				break
			}
		}
		base.cursor = v_13
		var /** number */ v_16 = base.cursor
		lab20: {
			while (true) {
				var /** number */ v_17 = base.cursor
				lab21: {
					golab22: while (true) {
						var /** number */ v_18 = base.cursor
						lab23: {
							base.bra = base.cursor
							if (!(base.eq_s('ʽ'))) {
								break lab23
							}
							base.ket = base.cursor
							base.cursor = v_18
							break golab22
						}
						base.cursor = v_18
						if (base.cursor >= base.limit) {
							break lab21
						}
						base.cursor++
					}
					if (!base.slice_del()) {
						return false
					}
					continue
				}
				base.cursor = v_17
				break
			}
		}
		base.cursor = v_16
		var /** number */ v_19 = base.cursor
		lab24: {
			while (true) {
				var /** number */ v_20 = base.cursor
				lab25: {
					golab26: while (true) {
						var /** number */ v_21 = base.cursor
						lab27: {
							base.bra = base.cursor
							if (!(base.eq_s('ˈ'))) {
								break lab27
							}
							base.ket = base.cursor
							base.cursor = v_21
							break golab26
						}
						base.cursor = v_21
						if (base.cursor >= base.limit) {
							break lab25
						}
						base.cursor++
					}
					if (!base.slice_del()) {
						return false
					}
					continue
				}
				base.cursor = v_20
				break
			}
		}
		base.cursor = v_19
		var /** number */ v_22 = base.cursor
		lab28: {
			while (true) {
				var /** number */ v_23 = base.cursor
				lab29: {
					golab30: while (true) {
						var /** number */ v_24 = base.cursor
						lab31: {
							base.bra = base.cursor
							if (!(base.eq_s('‘'))) {
								break lab31
							}
							base.ket = base.cursor
							base.cursor = v_24
							break golab30
						}
						base.cursor = v_24
						if (base.cursor >= base.limit) {
							break lab29
						}
						base.cursor++
					}
					if (!base.slice_del()) {
						return false
					}
					continue
				}
				base.cursor = v_23
				break
			}
		}
		base.cursor = v_22
		var /** number */ v_25 = base.cursor
		lab32: {
			while (true) {
				var /** number */ v_26 = base.cursor
				lab33: {
					golab34: while (true) {
						var /** number */ v_27 = base.cursor
						lab35: {
							base.bra = base.cursor
							if (!(base.eq_s('’'))) {
								break lab35
							}
							base.ket = base.cursor
							base.cursor = v_27
							break golab34
						}
						base.cursor = v_27
						if (base.cursor >= base.limit) {
							break lab33
						}
						base.cursor++
					}
					if (!base.slice_del()) {
						return false
					}
					continue
				}
				base.cursor = v_26
				break
			}
		}
		base.cursor = v_25
		var /** number */ v_28 = base.cursor
		lab36: {
			while (true) {
				var /** number */ v_29 = base.cursor
				lab37: {
					golab38: while (true) {
						var /** number */ v_30 = base.cursor
						lab39: {
							base.bra = base.cursor
							if (!(base.eq_s('‛'))) {
								break lab39
							}
							base.ket = base.cursor
							base.cursor = v_30
							break golab38
						}
						base.cursor = v_30
						if (base.cursor >= base.limit) {
							break lab37
						}
						base.cursor++
					}
					if (!base.slice_del()) {
						return false
					}
					continue
				}
				base.cursor = v_29
				break
			}
		}
		base.cursor = v_28
		var /** number */ v_31 = base.cursor
		lab40: {
			while (true) {
				var /** number */ v_32 = base.cursor
				lab41: {
					golab42: while (true) {
						var /** number */ v_33 = base.cursor
						lab43: {
							base.bra = base.cursor
							if (!(base.eq_s('′'))) {
								break lab43
							}
							base.ket = base.cursor
							base.cursor = v_33
							break golab42
						}
						base.cursor = v_33
						if (base.cursor >= base.limit) {
							break lab41
						}
						base.cursor++
					}
					if (!base.slice_del()) {
						return false
					}
					continue
				}
				base.cursor = v_32
				break
			}
		}
		base.cursor = v_31
		return true
	}

	/** @return {boolean} */
	function r_mark_regions() {
		I_pV = base.limit
		I_p1 = base.limit
		I_p2 = base.limit
		var /** number */ v_1 = base.cursor
		lab0: {
			golab1: while (true) {
				lab2: {
					if (!(base.in_grouping(g_v, 1072, 1111))) {
						break lab2
					}
					break golab1
				}
				if (base.cursor >= base.limit) {
					break lab0
				}
				base.cursor++
			}
			I_pV = base.cursor
			golab3: while (true) {
				lab4: {
					if (!(base.out_grouping(g_v, 1072, 1111))) {
						break lab4
					}
					break golab3
				}
				if (base.cursor >= base.limit) {
					break lab0
				}
				base.cursor++
			}
			I_p1 = base.cursor
			golab5: while (true) {
				lab6: {
					if (!(base.in_grouping(g_v, 1072, 1111))) {
						break lab6
					}
					break golab5
				}
				if (base.cursor >= base.limit) {
					break lab0
				}
				base.cursor++
			}
			golab7: while (true) {
				lab8: {
					if (!(base.out_grouping(g_v, 1072, 1111))) {
						break lab8
					}
					break golab7
				}
				if (base.cursor >= base.limit) {
					break lab0
				}
				base.cursor++
			}
			I_p2 = base.cursor
		}
		base.cursor = v_1
		return true
	}

	/** @return {boolean} */
	function r_R1() {
		return I_p1 <= base.cursor
	}

	/** @return {boolean} */
	function r_R2() {
		return I_p2 <= base.cursor
	}

	/** @return {boolean} */
	function r_perfective_gerund() {
		base.ket = base.cursor
		if (base.find_among_b(a_0) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_adjective() {
		base.ket = base.cursor
		if (base.find_among_b(a_1) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_adjectival() {
		if (!r_adjective()) {
			return false
		}
		var /** number */ v_1 = base.limit - base.cursor
		lab0: {
			base.ket = base.cursor
			if (base.find_among_b(a_2) == 0) {
				base.cursor = base.limit - v_1
				break lab0
			}
			base.bra = base.cursor
			if (!base.slice_del()) {
				return false
			}
		}
		return true
	}

	/** @return {boolean} */
	function r_reflexive() {
		base.ket = base.cursor
		if (base.find_among_b(a_3) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_verb() {
		base.ket = base.cursor
		if (base.find_among_b(a_4) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_noun() {
		base.ket = base.cursor
		if (base.find_among_b(a_5) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_common_avn() {
		base.ket = base.cursor
		if (base.find_among_b(a_6) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_derivational() {
		base.ket = base.cursor
		if (base.find_among_b(a_7) == 0) {
			return false
		}
		base.bra = base.cursor
		if (!r_R2()) {
			return false
		}
		if (!base.slice_del()) {
			return false
		}
		return true
	}

	this.stem = /** @return {boolean} */ function () {
		r_prelude()
		r_mark_regions()
		base.limit_backward = base.cursor
		base.cursor = base.limit
		if (base.cursor < I_pV) {
			return false
		}
		var /** number */ v_4 = base.limit_backward
		base.limit_backward = I_pV
		var /** number */ v_5 = base.limit - base.cursor
		lab0: {
			lab1: {
				var /** number */ v_6 = base.limit - base.cursor
				lab2: {
					if (!r_perfective_gerund()) {
						break lab2
					}
					break lab1
				}
				base.cursor = base.limit - v_6
				var /** number */ v_7 = base.limit - base.cursor
				lab3: {
					if (!r_reflexive()) {
						base.cursor = base.limit - v_7
						break lab3
					}
				}
				lab4: {
					var /** number */ v_8 = base.limit - base.cursor
					lab5: {
						if (!r_adjectival()) {
							break lab5
						}
						break lab4
					}
					base.cursor = base.limit - v_8
					lab6: {
						if (!r_verb()) {
							break lab6
						}
						break lab4
					}
					base.cursor = base.limit - v_8
					lab7: {
						if (!r_noun()) {
							break lab7
						}
						break lab4
					}
					base.cursor = base.limit - v_8
					if (!r_common_avn()) {
						break lab0
					}
				}
			}
		}
		base.cursor = base.limit - v_5
		var /** number */ v_9 = base.limit - base.cursor
		r_derivational()
		base.cursor = base.limit - v_9
		base.limit_backward = v_4
		base.cursor = base.limit_backward
		return true
	}

	/**@return{string}*/
	this['stemWord'] = function (/**string*/ word) {
		base.setCurrent(word)
		this.stem()
		return base.getCurrent()
	}
}

export default UkrainianStemmer
